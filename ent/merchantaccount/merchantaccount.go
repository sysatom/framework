// Code generated by ent, DO NOT EDIT.

package merchantaccount

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the merchantaccount type in the database.
	Label = "merchant_account"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUsername holds the string denoting the username field in the database.
	FieldUsername = "username"
	// FieldPassword holds the string denoting the password field in the database.
	FieldPassword = "password"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldPhone holds the string denoting the phone field in the database.
	FieldPhone = "phone"
	// FieldIsMainAccount holds the string denoting the is_main_account field in the database.
	FieldIsMainAccount = "is_main_account"
	// Table holds the table name of the merchantaccount in the database.
	Table = "merchant_accounts"
)

// Columns holds all SQL columns for merchantaccount fields.
var Columns = []string{
	FieldID,
	FieldUsername,
	FieldPassword,
	FieldEmail,
	FieldPhone,
	FieldIsMainAccount,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "merchant_accounts"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"merchant_accounts",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultEmail holds the default value on creation for the "email" field.
	DefaultEmail string
	// DefaultPhone holds the default value on creation for the "phone" field.
	DefaultPhone string
	// DefaultIsMainAccount holds the default value on creation for the "is_main_account" field.
	DefaultIsMainAccount bool
)

// OrderOption defines the ordering options for the MerchantAccount queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUsername orders the results by the username field.
func ByUsername(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsername, opts...).ToFunc()
}

// ByPassword orders the results by the password field.
func ByPassword(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPassword, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByPhone orders the results by the phone field.
func ByPhone(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPhone, opts...).ToFunc()
}

// ByIsMainAccount orders the results by the is_main_account field.
func ByIsMainAccount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsMainAccount, opts...).ToFunc()
}
