// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/sysatom/framework/ent/merchant"
	"github.com/sysatom/framework/ent/user"
	"github.com/sysatom/framework/ent/userloginmethod"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// user name
	Username string `json:"username,omitempty"`
	// Phone holds the value of the "phone" field.
	Phone string `json:"phone,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserQuery when eager-loading is set.
	Edges                 UserEdges `json:"edges"`
	user_introducer       *uint64
	user_default_merchant *uint64
	selectValues          sql.SelectValues
}

// UserEdges holds the relations/edges for other nodes in the graph.
type UserEdges struct {
	// LoginMethods holds the value of the login_methods edge.
	LoginMethods []*UserLoginMethod `json:"login_methods,omitempty"`
	// Introducer holds the value of the introducer edge.
	Introducer *UserLoginMethod `json:"introducer,omitempty"`
	// DefaultMerchant holds the value of the default_merchant edge.
	DefaultMerchant *Merchant `json:"default_merchant,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// LoginMethodsOrErr returns the LoginMethods value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) LoginMethodsOrErr() ([]*UserLoginMethod, error) {
	if e.loadedTypes[0] {
		return e.LoginMethods, nil
	}
	return nil, &NotLoadedError{edge: "login_methods"}
}

// IntroducerOrErr returns the Introducer value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserEdges) IntroducerOrErr() (*UserLoginMethod, error) {
	if e.Introducer != nil {
		return e.Introducer, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: userloginmethod.Label}
	}
	return nil, &NotLoadedError{edge: "introducer"}
}

// DefaultMerchantOrErr returns the DefaultMerchant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserEdges) DefaultMerchantOrErr() (*Merchant, error) {
	if e.DefaultMerchant != nil {
		return e.DefaultMerchant, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: merchant.Label}
	}
	return nil, &NotLoadedError{edge: "default_merchant"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			values[i] = new(sql.NullInt64)
		case user.FieldUsername, user.FieldPhone, user.FieldEmail:
			values[i] = new(sql.NullString)
		case user.FieldCreatedAt, user.FieldUpdatedAt, user.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case user.ForeignKeys[0]: // user_introducer
			values[i] = new(sql.NullInt64)
		case user.ForeignKeys[1]: // user_default_merchant
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (u *User) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			u.ID = uint64(value.Int64)
		case user.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				u.CreatedAt = value.Time
			}
		case user.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				u.UpdatedAt = value.Time
			}
		case user.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				u.DeletedAt = value.Time
			}
		case user.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field username", values[i])
			} else if value.Valid {
				u.Username = value.String
			}
		case user.FieldPhone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone", values[i])
			} else if value.Valid {
				u.Phone = value.String
			}
		case user.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				u.Email = value.String
			}
		case user.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_introducer", value)
			} else if value.Valid {
				u.user_introducer = new(uint64)
				*u.user_introducer = uint64(value.Int64)
			}
		case user.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_default_merchant", value)
			} else if value.Valid {
				u.user_default_merchant = new(uint64)
				*u.user_default_merchant = uint64(value.Int64)
			}
		default:
			u.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the User.
// This includes values selected through modifiers, order, etc.
func (u *User) Value(name string) (ent.Value, error) {
	return u.selectValues.Get(name)
}

// QueryLoginMethods queries the "login_methods" edge of the User entity.
func (u *User) QueryLoginMethods() *UserLoginMethodQuery {
	return NewUserClient(u.config).QueryLoginMethods(u)
}

// QueryIntroducer queries the "introducer" edge of the User entity.
func (u *User) QueryIntroducer() *UserLoginMethodQuery {
	return NewUserClient(u.config).QueryIntroducer(u)
}

// QueryDefaultMerchant queries the "default_merchant" edge of the User entity.
func (u *User) QueryDefaultMerchant() *MerchantQuery {
	return NewUserClient(u.config).QueryDefaultMerchant(u)
}

// Update returns a builder for updating this User.
// Note that you need to call User.Unwrap() before calling this method if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *User) Update() *UserUpdateOne {
	return NewUserClient(u.config).UpdateOne(u)
}

// Unwrap unwraps the User entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (u *User) Unwrap() *User {
	_tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: User is not a transactional entity")
	}
	u.config.driver = _tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v, ", u.ID))
	builder.WriteString("created_at=")
	builder.WriteString(u.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(u.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(u.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("username=")
	builder.WriteString(u.Username)
	builder.WriteString(", ")
	builder.WriteString("phone=")
	builder.WriteString(u.Phone)
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(u.Email)
	builder.WriteByte(')')
	return builder.String()
}

// Users is a parsable slice of User.
type Users []*User
