// Code generated by ent, DO NOT EDIT.

package merchant

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/sysatom/framework/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Merchant {
	return predicate.Merchant(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Merchant {
	return predicate.Merchant(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Merchant {
	return predicate.Merchant(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Merchant {
	return predicate.Merchant(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Merchant {
	return predicate.Merchant(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Merchant {
	return predicate.Merchant(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Merchant {
	return predicate.Merchant(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Merchant {
	return predicate.Merchant(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Merchant {
	return predicate.Merchant(sql.FieldLTE(FieldID, id))
}

// MerchantName applies equality check predicate on the "merchant_name" field. It's identical to MerchantNameEQ.
func MerchantName(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldEQ(FieldMerchantName, v))
}

// ContactPerson applies equality check predicate on the "contact_person" field. It's identical to ContactPersonEQ.
func ContactPerson(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldEQ(FieldContactPerson, v))
}

// ContactPhone applies equality check predicate on the "contact_phone" field. It's identical to ContactPhoneEQ.
func ContactPhone(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldEQ(FieldContactPhone, v))
}

// Country applies equality check predicate on the "country" field. It's identical to CountryEQ.
func Country(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldEQ(FieldCountry, v))
}

// Province applies equality check predicate on the "province" field. It's identical to ProvinceEQ.
func Province(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldEQ(FieldProvince, v))
}

// City applies equality check predicate on the "city" field. It's identical to CityEQ.
func City(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldEQ(FieldCity, v))
}

// District applies equality check predicate on the "district" field. It's identical to DistrictEQ.
func District(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldEQ(FieldDistrict, v))
}

// Address applies equality check predicate on the "address" field. It's identical to AddressEQ.
func Address(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldEQ(FieldAddress, v))
}

// MerchantNameEQ applies the EQ predicate on the "merchant_name" field.
func MerchantNameEQ(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldEQ(FieldMerchantName, v))
}

// MerchantNameNEQ applies the NEQ predicate on the "merchant_name" field.
func MerchantNameNEQ(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldNEQ(FieldMerchantName, v))
}

// MerchantNameIn applies the In predicate on the "merchant_name" field.
func MerchantNameIn(vs ...string) predicate.Merchant {
	return predicate.Merchant(sql.FieldIn(FieldMerchantName, vs...))
}

// MerchantNameNotIn applies the NotIn predicate on the "merchant_name" field.
func MerchantNameNotIn(vs ...string) predicate.Merchant {
	return predicate.Merchant(sql.FieldNotIn(FieldMerchantName, vs...))
}

// MerchantNameGT applies the GT predicate on the "merchant_name" field.
func MerchantNameGT(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldGT(FieldMerchantName, v))
}

// MerchantNameGTE applies the GTE predicate on the "merchant_name" field.
func MerchantNameGTE(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldGTE(FieldMerchantName, v))
}

// MerchantNameLT applies the LT predicate on the "merchant_name" field.
func MerchantNameLT(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldLT(FieldMerchantName, v))
}

// MerchantNameLTE applies the LTE predicate on the "merchant_name" field.
func MerchantNameLTE(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldLTE(FieldMerchantName, v))
}

// MerchantNameContains applies the Contains predicate on the "merchant_name" field.
func MerchantNameContains(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldContains(FieldMerchantName, v))
}

// MerchantNameHasPrefix applies the HasPrefix predicate on the "merchant_name" field.
func MerchantNameHasPrefix(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldHasPrefix(FieldMerchantName, v))
}

// MerchantNameHasSuffix applies the HasSuffix predicate on the "merchant_name" field.
func MerchantNameHasSuffix(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldHasSuffix(FieldMerchantName, v))
}

// MerchantNameEqualFold applies the EqualFold predicate on the "merchant_name" field.
func MerchantNameEqualFold(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldEqualFold(FieldMerchantName, v))
}

// MerchantNameContainsFold applies the ContainsFold predicate on the "merchant_name" field.
func MerchantNameContainsFold(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldContainsFold(FieldMerchantName, v))
}

// ContactPersonEQ applies the EQ predicate on the "contact_person" field.
func ContactPersonEQ(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldEQ(FieldContactPerson, v))
}

// ContactPersonNEQ applies the NEQ predicate on the "contact_person" field.
func ContactPersonNEQ(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldNEQ(FieldContactPerson, v))
}

// ContactPersonIn applies the In predicate on the "contact_person" field.
func ContactPersonIn(vs ...string) predicate.Merchant {
	return predicate.Merchant(sql.FieldIn(FieldContactPerson, vs...))
}

// ContactPersonNotIn applies the NotIn predicate on the "contact_person" field.
func ContactPersonNotIn(vs ...string) predicate.Merchant {
	return predicate.Merchant(sql.FieldNotIn(FieldContactPerson, vs...))
}

// ContactPersonGT applies the GT predicate on the "contact_person" field.
func ContactPersonGT(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldGT(FieldContactPerson, v))
}

// ContactPersonGTE applies the GTE predicate on the "contact_person" field.
func ContactPersonGTE(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldGTE(FieldContactPerson, v))
}

// ContactPersonLT applies the LT predicate on the "contact_person" field.
func ContactPersonLT(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldLT(FieldContactPerson, v))
}

// ContactPersonLTE applies the LTE predicate on the "contact_person" field.
func ContactPersonLTE(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldLTE(FieldContactPerson, v))
}

// ContactPersonContains applies the Contains predicate on the "contact_person" field.
func ContactPersonContains(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldContains(FieldContactPerson, v))
}

// ContactPersonHasPrefix applies the HasPrefix predicate on the "contact_person" field.
func ContactPersonHasPrefix(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldHasPrefix(FieldContactPerson, v))
}

// ContactPersonHasSuffix applies the HasSuffix predicate on the "contact_person" field.
func ContactPersonHasSuffix(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldHasSuffix(FieldContactPerson, v))
}

// ContactPersonEqualFold applies the EqualFold predicate on the "contact_person" field.
func ContactPersonEqualFold(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldEqualFold(FieldContactPerson, v))
}

// ContactPersonContainsFold applies the ContainsFold predicate on the "contact_person" field.
func ContactPersonContainsFold(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldContainsFold(FieldContactPerson, v))
}

// ContactPhoneEQ applies the EQ predicate on the "contact_phone" field.
func ContactPhoneEQ(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldEQ(FieldContactPhone, v))
}

// ContactPhoneNEQ applies the NEQ predicate on the "contact_phone" field.
func ContactPhoneNEQ(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldNEQ(FieldContactPhone, v))
}

// ContactPhoneIn applies the In predicate on the "contact_phone" field.
func ContactPhoneIn(vs ...string) predicate.Merchant {
	return predicate.Merchant(sql.FieldIn(FieldContactPhone, vs...))
}

// ContactPhoneNotIn applies the NotIn predicate on the "contact_phone" field.
func ContactPhoneNotIn(vs ...string) predicate.Merchant {
	return predicate.Merchant(sql.FieldNotIn(FieldContactPhone, vs...))
}

// ContactPhoneGT applies the GT predicate on the "contact_phone" field.
func ContactPhoneGT(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldGT(FieldContactPhone, v))
}

// ContactPhoneGTE applies the GTE predicate on the "contact_phone" field.
func ContactPhoneGTE(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldGTE(FieldContactPhone, v))
}

// ContactPhoneLT applies the LT predicate on the "contact_phone" field.
func ContactPhoneLT(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldLT(FieldContactPhone, v))
}

// ContactPhoneLTE applies the LTE predicate on the "contact_phone" field.
func ContactPhoneLTE(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldLTE(FieldContactPhone, v))
}

// ContactPhoneContains applies the Contains predicate on the "contact_phone" field.
func ContactPhoneContains(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldContains(FieldContactPhone, v))
}

// ContactPhoneHasPrefix applies the HasPrefix predicate on the "contact_phone" field.
func ContactPhoneHasPrefix(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldHasPrefix(FieldContactPhone, v))
}

// ContactPhoneHasSuffix applies the HasSuffix predicate on the "contact_phone" field.
func ContactPhoneHasSuffix(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldHasSuffix(FieldContactPhone, v))
}

// ContactPhoneEqualFold applies the EqualFold predicate on the "contact_phone" field.
func ContactPhoneEqualFold(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldEqualFold(FieldContactPhone, v))
}

// ContactPhoneContainsFold applies the ContainsFold predicate on the "contact_phone" field.
func ContactPhoneContainsFold(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldContainsFold(FieldContactPhone, v))
}

// CountryEQ applies the EQ predicate on the "country" field.
func CountryEQ(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldEQ(FieldCountry, v))
}

// CountryNEQ applies the NEQ predicate on the "country" field.
func CountryNEQ(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldNEQ(FieldCountry, v))
}

// CountryIn applies the In predicate on the "country" field.
func CountryIn(vs ...string) predicate.Merchant {
	return predicate.Merchant(sql.FieldIn(FieldCountry, vs...))
}

// CountryNotIn applies the NotIn predicate on the "country" field.
func CountryNotIn(vs ...string) predicate.Merchant {
	return predicate.Merchant(sql.FieldNotIn(FieldCountry, vs...))
}

// CountryGT applies the GT predicate on the "country" field.
func CountryGT(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldGT(FieldCountry, v))
}

// CountryGTE applies the GTE predicate on the "country" field.
func CountryGTE(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldGTE(FieldCountry, v))
}

// CountryLT applies the LT predicate on the "country" field.
func CountryLT(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldLT(FieldCountry, v))
}

// CountryLTE applies the LTE predicate on the "country" field.
func CountryLTE(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldLTE(FieldCountry, v))
}

// CountryContains applies the Contains predicate on the "country" field.
func CountryContains(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldContains(FieldCountry, v))
}

// CountryHasPrefix applies the HasPrefix predicate on the "country" field.
func CountryHasPrefix(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldHasPrefix(FieldCountry, v))
}

// CountryHasSuffix applies the HasSuffix predicate on the "country" field.
func CountryHasSuffix(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldHasSuffix(FieldCountry, v))
}

// CountryEqualFold applies the EqualFold predicate on the "country" field.
func CountryEqualFold(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldEqualFold(FieldCountry, v))
}

// CountryContainsFold applies the ContainsFold predicate on the "country" field.
func CountryContainsFold(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldContainsFold(FieldCountry, v))
}

// ProvinceEQ applies the EQ predicate on the "province" field.
func ProvinceEQ(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldEQ(FieldProvince, v))
}

// ProvinceNEQ applies the NEQ predicate on the "province" field.
func ProvinceNEQ(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldNEQ(FieldProvince, v))
}

// ProvinceIn applies the In predicate on the "province" field.
func ProvinceIn(vs ...string) predicate.Merchant {
	return predicate.Merchant(sql.FieldIn(FieldProvince, vs...))
}

// ProvinceNotIn applies the NotIn predicate on the "province" field.
func ProvinceNotIn(vs ...string) predicate.Merchant {
	return predicate.Merchant(sql.FieldNotIn(FieldProvince, vs...))
}

// ProvinceGT applies the GT predicate on the "province" field.
func ProvinceGT(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldGT(FieldProvince, v))
}

// ProvinceGTE applies the GTE predicate on the "province" field.
func ProvinceGTE(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldGTE(FieldProvince, v))
}

// ProvinceLT applies the LT predicate on the "province" field.
func ProvinceLT(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldLT(FieldProvince, v))
}

// ProvinceLTE applies the LTE predicate on the "province" field.
func ProvinceLTE(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldLTE(FieldProvince, v))
}

// ProvinceContains applies the Contains predicate on the "province" field.
func ProvinceContains(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldContains(FieldProvince, v))
}

// ProvinceHasPrefix applies the HasPrefix predicate on the "province" field.
func ProvinceHasPrefix(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldHasPrefix(FieldProvince, v))
}

// ProvinceHasSuffix applies the HasSuffix predicate on the "province" field.
func ProvinceHasSuffix(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldHasSuffix(FieldProvince, v))
}

// ProvinceEqualFold applies the EqualFold predicate on the "province" field.
func ProvinceEqualFold(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldEqualFold(FieldProvince, v))
}

// ProvinceContainsFold applies the ContainsFold predicate on the "province" field.
func ProvinceContainsFold(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldContainsFold(FieldProvince, v))
}

// CityEQ applies the EQ predicate on the "city" field.
func CityEQ(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldEQ(FieldCity, v))
}

// CityNEQ applies the NEQ predicate on the "city" field.
func CityNEQ(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldNEQ(FieldCity, v))
}

// CityIn applies the In predicate on the "city" field.
func CityIn(vs ...string) predicate.Merchant {
	return predicate.Merchant(sql.FieldIn(FieldCity, vs...))
}

// CityNotIn applies the NotIn predicate on the "city" field.
func CityNotIn(vs ...string) predicate.Merchant {
	return predicate.Merchant(sql.FieldNotIn(FieldCity, vs...))
}

// CityGT applies the GT predicate on the "city" field.
func CityGT(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldGT(FieldCity, v))
}

// CityGTE applies the GTE predicate on the "city" field.
func CityGTE(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldGTE(FieldCity, v))
}

// CityLT applies the LT predicate on the "city" field.
func CityLT(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldLT(FieldCity, v))
}

// CityLTE applies the LTE predicate on the "city" field.
func CityLTE(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldLTE(FieldCity, v))
}

// CityContains applies the Contains predicate on the "city" field.
func CityContains(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldContains(FieldCity, v))
}

// CityHasPrefix applies the HasPrefix predicate on the "city" field.
func CityHasPrefix(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldHasPrefix(FieldCity, v))
}

// CityHasSuffix applies the HasSuffix predicate on the "city" field.
func CityHasSuffix(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldHasSuffix(FieldCity, v))
}

// CityEqualFold applies the EqualFold predicate on the "city" field.
func CityEqualFold(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldEqualFold(FieldCity, v))
}

// CityContainsFold applies the ContainsFold predicate on the "city" field.
func CityContainsFold(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldContainsFold(FieldCity, v))
}

// DistrictEQ applies the EQ predicate on the "district" field.
func DistrictEQ(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldEQ(FieldDistrict, v))
}

// DistrictNEQ applies the NEQ predicate on the "district" field.
func DistrictNEQ(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldNEQ(FieldDistrict, v))
}

// DistrictIn applies the In predicate on the "district" field.
func DistrictIn(vs ...string) predicate.Merchant {
	return predicate.Merchant(sql.FieldIn(FieldDistrict, vs...))
}

// DistrictNotIn applies the NotIn predicate on the "district" field.
func DistrictNotIn(vs ...string) predicate.Merchant {
	return predicate.Merchant(sql.FieldNotIn(FieldDistrict, vs...))
}

// DistrictGT applies the GT predicate on the "district" field.
func DistrictGT(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldGT(FieldDistrict, v))
}

// DistrictGTE applies the GTE predicate on the "district" field.
func DistrictGTE(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldGTE(FieldDistrict, v))
}

// DistrictLT applies the LT predicate on the "district" field.
func DistrictLT(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldLT(FieldDistrict, v))
}

// DistrictLTE applies the LTE predicate on the "district" field.
func DistrictLTE(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldLTE(FieldDistrict, v))
}

// DistrictContains applies the Contains predicate on the "district" field.
func DistrictContains(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldContains(FieldDistrict, v))
}

// DistrictHasPrefix applies the HasPrefix predicate on the "district" field.
func DistrictHasPrefix(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldHasPrefix(FieldDistrict, v))
}

// DistrictHasSuffix applies the HasSuffix predicate on the "district" field.
func DistrictHasSuffix(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldHasSuffix(FieldDistrict, v))
}

// DistrictEqualFold applies the EqualFold predicate on the "district" field.
func DistrictEqualFold(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldEqualFold(FieldDistrict, v))
}

// DistrictContainsFold applies the ContainsFold predicate on the "district" field.
func DistrictContainsFold(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldContainsFold(FieldDistrict, v))
}

// AddressEQ applies the EQ predicate on the "address" field.
func AddressEQ(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldEQ(FieldAddress, v))
}

// AddressNEQ applies the NEQ predicate on the "address" field.
func AddressNEQ(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldNEQ(FieldAddress, v))
}

// AddressIn applies the In predicate on the "address" field.
func AddressIn(vs ...string) predicate.Merchant {
	return predicate.Merchant(sql.FieldIn(FieldAddress, vs...))
}

// AddressNotIn applies the NotIn predicate on the "address" field.
func AddressNotIn(vs ...string) predicate.Merchant {
	return predicate.Merchant(sql.FieldNotIn(FieldAddress, vs...))
}

// AddressGT applies the GT predicate on the "address" field.
func AddressGT(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldGT(FieldAddress, v))
}

// AddressGTE applies the GTE predicate on the "address" field.
func AddressGTE(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldGTE(FieldAddress, v))
}

// AddressLT applies the LT predicate on the "address" field.
func AddressLT(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldLT(FieldAddress, v))
}

// AddressLTE applies the LTE predicate on the "address" field.
func AddressLTE(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldLTE(FieldAddress, v))
}

// AddressContains applies the Contains predicate on the "address" field.
func AddressContains(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldContains(FieldAddress, v))
}

// AddressHasPrefix applies the HasPrefix predicate on the "address" field.
func AddressHasPrefix(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldHasPrefix(FieldAddress, v))
}

// AddressHasSuffix applies the HasSuffix predicate on the "address" field.
func AddressHasSuffix(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldHasSuffix(FieldAddress, v))
}

// AddressEqualFold applies the EqualFold predicate on the "address" field.
func AddressEqualFold(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldEqualFold(FieldAddress, v))
}

// AddressContainsFold applies the ContainsFold predicate on the "address" field.
func AddressContainsFold(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldContainsFold(FieldAddress, v))
}

// HasAccounts applies the HasEdge predicate on the "accounts" edge.
func HasAccounts() predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AccountsTable, AccountsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAccountsWith applies the HasEdge predicate on the "accounts" edge with a given conditions (other predicates).
func HasAccountsWith(preds ...predicate.MerchantAccount) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		step := newAccountsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Merchant) predicate.Merchant {
	return predicate.Merchant(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Merchant) predicate.Merchant {
	return predicate.Merchant(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Merchant) predicate.Merchant {
	return predicate.Merchant(sql.NotPredicates(p))
}
