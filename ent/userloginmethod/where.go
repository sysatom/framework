// Code generated by ent, DO NOT EDIT.

package userloginmethod

import (
	"entgo.io/ent/dialect/sql"
	"github.com/sysatom/framework/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.UserLoginMethod {
	return predicate.UserLoginMethod(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.UserLoginMethod {
	return predicate.UserLoginMethod(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.UserLoginMethod {
	return predicate.UserLoginMethod(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.UserLoginMethod {
	return predicate.UserLoginMethod(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.UserLoginMethod {
	return predicate.UserLoginMethod(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.UserLoginMethod {
	return predicate.UserLoginMethod(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.UserLoginMethod {
	return predicate.UserLoginMethod(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.UserLoginMethod {
	return predicate.UserLoginMethod(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.UserLoginMethod {
	return predicate.UserLoginMethod(sql.FieldLTE(FieldID, id))
}

// LoginType applies equality check predicate on the "login_type" field. It's identical to LoginTypeEQ.
func LoginType(v string) predicate.UserLoginMethod {
	return predicate.UserLoginMethod(sql.FieldEQ(FieldLoginType, v))
}

// Identifier applies equality check predicate on the "identifier" field. It's identical to IdentifierEQ.
func Identifier(v string) predicate.UserLoginMethod {
	return predicate.UserLoginMethod(sql.FieldEQ(FieldIdentifier, v))
}

// LoginTypeEQ applies the EQ predicate on the "login_type" field.
func LoginTypeEQ(v string) predicate.UserLoginMethod {
	return predicate.UserLoginMethod(sql.FieldEQ(FieldLoginType, v))
}

// LoginTypeNEQ applies the NEQ predicate on the "login_type" field.
func LoginTypeNEQ(v string) predicate.UserLoginMethod {
	return predicate.UserLoginMethod(sql.FieldNEQ(FieldLoginType, v))
}

// LoginTypeIn applies the In predicate on the "login_type" field.
func LoginTypeIn(vs ...string) predicate.UserLoginMethod {
	return predicate.UserLoginMethod(sql.FieldIn(FieldLoginType, vs...))
}

// LoginTypeNotIn applies the NotIn predicate on the "login_type" field.
func LoginTypeNotIn(vs ...string) predicate.UserLoginMethod {
	return predicate.UserLoginMethod(sql.FieldNotIn(FieldLoginType, vs...))
}

// LoginTypeGT applies the GT predicate on the "login_type" field.
func LoginTypeGT(v string) predicate.UserLoginMethod {
	return predicate.UserLoginMethod(sql.FieldGT(FieldLoginType, v))
}

// LoginTypeGTE applies the GTE predicate on the "login_type" field.
func LoginTypeGTE(v string) predicate.UserLoginMethod {
	return predicate.UserLoginMethod(sql.FieldGTE(FieldLoginType, v))
}

// LoginTypeLT applies the LT predicate on the "login_type" field.
func LoginTypeLT(v string) predicate.UserLoginMethod {
	return predicate.UserLoginMethod(sql.FieldLT(FieldLoginType, v))
}

// LoginTypeLTE applies the LTE predicate on the "login_type" field.
func LoginTypeLTE(v string) predicate.UserLoginMethod {
	return predicate.UserLoginMethod(sql.FieldLTE(FieldLoginType, v))
}

// LoginTypeContains applies the Contains predicate on the "login_type" field.
func LoginTypeContains(v string) predicate.UserLoginMethod {
	return predicate.UserLoginMethod(sql.FieldContains(FieldLoginType, v))
}

// LoginTypeHasPrefix applies the HasPrefix predicate on the "login_type" field.
func LoginTypeHasPrefix(v string) predicate.UserLoginMethod {
	return predicate.UserLoginMethod(sql.FieldHasPrefix(FieldLoginType, v))
}

// LoginTypeHasSuffix applies the HasSuffix predicate on the "login_type" field.
func LoginTypeHasSuffix(v string) predicate.UserLoginMethod {
	return predicate.UserLoginMethod(sql.FieldHasSuffix(FieldLoginType, v))
}

// LoginTypeEqualFold applies the EqualFold predicate on the "login_type" field.
func LoginTypeEqualFold(v string) predicate.UserLoginMethod {
	return predicate.UserLoginMethod(sql.FieldEqualFold(FieldLoginType, v))
}

// LoginTypeContainsFold applies the ContainsFold predicate on the "login_type" field.
func LoginTypeContainsFold(v string) predicate.UserLoginMethod {
	return predicate.UserLoginMethod(sql.FieldContainsFold(FieldLoginType, v))
}

// IdentifierEQ applies the EQ predicate on the "identifier" field.
func IdentifierEQ(v string) predicate.UserLoginMethod {
	return predicate.UserLoginMethod(sql.FieldEQ(FieldIdentifier, v))
}

// IdentifierNEQ applies the NEQ predicate on the "identifier" field.
func IdentifierNEQ(v string) predicate.UserLoginMethod {
	return predicate.UserLoginMethod(sql.FieldNEQ(FieldIdentifier, v))
}

// IdentifierIn applies the In predicate on the "identifier" field.
func IdentifierIn(vs ...string) predicate.UserLoginMethod {
	return predicate.UserLoginMethod(sql.FieldIn(FieldIdentifier, vs...))
}

// IdentifierNotIn applies the NotIn predicate on the "identifier" field.
func IdentifierNotIn(vs ...string) predicate.UserLoginMethod {
	return predicate.UserLoginMethod(sql.FieldNotIn(FieldIdentifier, vs...))
}

// IdentifierGT applies the GT predicate on the "identifier" field.
func IdentifierGT(v string) predicate.UserLoginMethod {
	return predicate.UserLoginMethod(sql.FieldGT(FieldIdentifier, v))
}

// IdentifierGTE applies the GTE predicate on the "identifier" field.
func IdentifierGTE(v string) predicate.UserLoginMethod {
	return predicate.UserLoginMethod(sql.FieldGTE(FieldIdentifier, v))
}

// IdentifierLT applies the LT predicate on the "identifier" field.
func IdentifierLT(v string) predicate.UserLoginMethod {
	return predicate.UserLoginMethod(sql.FieldLT(FieldIdentifier, v))
}

// IdentifierLTE applies the LTE predicate on the "identifier" field.
func IdentifierLTE(v string) predicate.UserLoginMethod {
	return predicate.UserLoginMethod(sql.FieldLTE(FieldIdentifier, v))
}

// IdentifierContains applies the Contains predicate on the "identifier" field.
func IdentifierContains(v string) predicate.UserLoginMethod {
	return predicate.UserLoginMethod(sql.FieldContains(FieldIdentifier, v))
}

// IdentifierHasPrefix applies the HasPrefix predicate on the "identifier" field.
func IdentifierHasPrefix(v string) predicate.UserLoginMethod {
	return predicate.UserLoginMethod(sql.FieldHasPrefix(FieldIdentifier, v))
}

// IdentifierHasSuffix applies the HasSuffix predicate on the "identifier" field.
func IdentifierHasSuffix(v string) predicate.UserLoginMethod {
	return predicate.UserLoginMethod(sql.FieldHasSuffix(FieldIdentifier, v))
}

// IdentifierEqualFold applies the EqualFold predicate on the "identifier" field.
func IdentifierEqualFold(v string) predicate.UserLoginMethod {
	return predicate.UserLoginMethod(sql.FieldEqualFold(FieldIdentifier, v))
}

// IdentifierContainsFold applies the ContainsFold predicate on the "identifier" field.
func IdentifierContainsFold(v string) predicate.UserLoginMethod {
	return predicate.UserLoginMethod(sql.FieldContainsFold(FieldIdentifier, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UserLoginMethod) predicate.UserLoginMethod {
	return predicate.UserLoginMethod(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UserLoginMethod) predicate.UserLoginMethod {
	return predicate.UserLoginMethod(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UserLoginMethod) predicate.UserLoginMethod {
	return predicate.UserLoginMethod(sql.NotPredicates(p))
}
