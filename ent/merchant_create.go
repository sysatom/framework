// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/sysatom/framework/ent/merchant"
	"github.com/sysatom/framework/ent/merchantaccount"
)

// MerchantCreate is the builder for creating a Merchant entity.
type MerchantCreate struct {
	config
	mutation *MerchantMutation
	hooks    []Hook
}

// SetMerchantName sets the "merchant_name" field.
func (mc *MerchantCreate) SetMerchantName(s string) *MerchantCreate {
	mc.mutation.SetMerchantName(s)
	return mc
}

// SetContactPerson sets the "contact_person" field.
func (mc *MerchantCreate) SetContactPerson(s string) *MerchantCreate {
	mc.mutation.SetContactPerson(s)
	return mc
}

// SetContactPhone sets the "contact_phone" field.
func (mc *MerchantCreate) SetContactPhone(s string) *MerchantCreate {
	mc.mutation.SetContactPhone(s)
	return mc
}

// SetCountry sets the "country" field.
func (mc *MerchantCreate) SetCountry(s string) *MerchantCreate {
	mc.mutation.SetCountry(s)
	return mc
}

// SetProvince sets the "province" field.
func (mc *MerchantCreate) SetProvince(s string) *MerchantCreate {
	mc.mutation.SetProvince(s)
	return mc
}

// SetCity sets the "city" field.
func (mc *MerchantCreate) SetCity(s string) *MerchantCreate {
	mc.mutation.SetCity(s)
	return mc
}

// SetDistrict sets the "district" field.
func (mc *MerchantCreate) SetDistrict(s string) *MerchantCreate {
	mc.mutation.SetDistrict(s)
	return mc
}

// SetAddress sets the "address" field.
func (mc *MerchantCreate) SetAddress(s string) *MerchantCreate {
	mc.mutation.SetAddress(s)
	return mc
}

// AddAccountIDs adds the "accounts" edge to the MerchantAccount entity by IDs.
func (mc *MerchantCreate) AddAccountIDs(ids ...int) *MerchantCreate {
	mc.mutation.AddAccountIDs(ids...)
	return mc
}

// AddAccounts adds the "accounts" edges to the MerchantAccount entity.
func (mc *MerchantCreate) AddAccounts(m ...*MerchantAccount) *MerchantCreate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mc.AddAccountIDs(ids...)
}

// Mutation returns the MerchantMutation object of the builder.
func (mc *MerchantCreate) Mutation() *MerchantMutation {
	return mc.mutation
}

// Save creates the Merchant in the database.
func (mc *MerchantCreate) Save(ctx context.Context) (*Merchant, error) {
	return withHooks(ctx, mc.sqlSave, mc.mutation, mc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mc *MerchantCreate) SaveX(ctx context.Context) *Merchant {
	v, err := mc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mc *MerchantCreate) Exec(ctx context.Context) error {
	_, err := mc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mc *MerchantCreate) ExecX(ctx context.Context) {
	if err := mc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mc *MerchantCreate) check() error {
	if _, ok := mc.mutation.MerchantName(); !ok {
		return &ValidationError{Name: "merchant_name", err: errors.New(`ent: missing required field "Merchant.merchant_name"`)}
	}
	if _, ok := mc.mutation.ContactPerson(); !ok {
		return &ValidationError{Name: "contact_person", err: errors.New(`ent: missing required field "Merchant.contact_person"`)}
	}
	if _, ok := mc.mutation.ContactPhone(); !ok {
		return &ValidationError{Name: "contact_phone", err: errors.New(`ent: missing required field "Merchant.contact_phone"`)}
	}
	if _, ok := mc.mutation.Country(); !ok {
		return &ValidationError{Name: "country", err: errors.New(`ent: missing required field "Merchant.country"`)}
	}
	if _, ok := mc.mutation.Province(); !ok {
		return &ValidationError{Name: "province", err: errors.New(`ent: missing required field "Merchant.province"`)}
	}
	if _, ok := mc.mutation.City(); !ok {
		return &ValidationError{Name: "city", err: errors.New(`ent: missing required field "Merchant.city"`)}
	}
	if _, ok := mc.mutation.District(); !ok {
		return &ValidationError{Name: "district", err: errors.New(`ent: missing required field "Merchant.district"`)}
	}
	if _, ok := mc.mutation.Address(); !ok {
		return &ValidationError{Name: "address", err: errors.New(`ent: missing required field "Merchant.address"`)}
	}
	return nil
}

func (mc *MerchantCreate) sqlSave(ctx context.Context) (*Merchant, error) {
	if err := mc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	mc.mutation.id = &_node.ID
	mc.mutation.done = true
	return _node, nil
}

func (mc *MerchantCreate) createSpec() (*Merchant, *sqlgraph.CreateSpec) {
	var (
		_node = &Merchant{config: mc.config}
		_spec = sqlgraph.NewCreateSpec(merchant.Table, sqlgraph.NewFieldSpec(merchant.FieldID, field.TypeInt))
	)
	if value, ok := mc.mutation.MerchantName(); ok {
		_spec.SetField(merchant.FieldMerchantName, field.TypeString, value)
		_node.MerchantName = value
	}
	if value, ok := mc.mutation.ContactPerson(); ok {
		_spec.SetField(merchant.FieldContactPerson, field.TypeString, value)
		_node.ContactPerson = value
	}
	if value, ok := mc.mutation.ContactPhone(); ok {
		_spec.SetField(merchant.FieldContactPhone, field.TypeString, value)
		_node.ContactPhone = value
	}
	if value, ok := mc.mutation.Country(); ok {
		_spec.SetField(merchant.FieldCountry, field.TypeString, value)
		_node.Country = value
	}
	if value, ok := mc.mutation.Province(); ok {
		_spec.SetField(merchant.FieldProvince, field.TypeString, value)
		_node.Province = value
	}
	if value, ok := mc.mutation.City(); ok {
		_spec.SetField(merchant.FieldCity, field.TypeString, value)
		_node.City = value
	}
	if value, ok := mc.mutation.District(); ok {
		_spec.SetField(merchant.FieldDistrict, field.TypeString, value)
		_node.District = value
	}
	if value, ok := mc.mutation.Address(); ok {
		_spec.SetField(merchant.FieldAddress, field.TypeString, value)
		_node.Address = value
	}
	if nodes := mc.mutation.AccountsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   merchant.AccountsTable,
			Columns: []string{merchant.AccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(merchantaccount.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// MerchantCreateBulk is the builder for creating many Merchant entities in bulk.
type MerchantCreateBulk struct {
	config
	err      error
	builders []*MerchantCreate
}

// Save creates the Merchant entities in the database.
func (mcb *MerchantCreateBulk) Save(ctx context.Context) ([]*Merchant, error) {
	if mcb.err != nil {
		return nil, mcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mcb.builders))
	nodes := make([]*Merchant, len(mcb.builders))
	mutators := make([]Mutator, len(mcb.builders))
	for i := range mcb.builders {
		func(i int, root context.Context) {
			builder := mcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MerchantMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mcb *MerchantCreateBulk) SaveX(ctx context.Context) []*Merchant {
	v, err := mcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mcb *MerchantCreateBulk) Exec(ctx context.Context) error {
	_, err := mcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mcb *MerchantCreateBulk) ExecX(ctx context.Context) {
	if err := mcb.Exec(ctx); err != nil {
		panic(err)
	}
}
