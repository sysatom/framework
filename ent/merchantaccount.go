// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/sysatom/framework/ent/merchantaccount"
)

// MerchantAccount is the model entity for the MerchantAccount schema.
type MerchantAccount struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// Username holds the value of the "username" field.
	Username string `json:"username,omitempty"`
	// Password holds the value of the "password" field.
	Password string `json:"password,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// Phone holds the value of the "phone" field.
	Phone string `json:"phone,omitempty"`
	// IsMainAccount holds the value of the "is_main_account" field.
	IsMainAccount     bool `json:"is_main_account,omitempty"`
	merchant_accounts *uint64
	selectValues      sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MerchantAccount) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case merchantaccount.FieldIsMainAccount:
			values[i] = new(sql.NullBool)
		case merchantaccount.FieldID:
			values[i] = new(sql.NullInt64)
		case merchantaccount.FieldUsername, merchantaccount.FieldPassword, merchantaccount.FieldEmail, merchantaccount.FieldPhone:
			values[i] = new(sql.NullString)
		case merchantaccount.FieldCreatedAt, merchantaccount.FieldUpdatedAt, merchantaccount.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case merchantaccount.ForeignKeys[0]: // merchant_accounts
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MerchantAccount fields.
func (ma *MerchantAccount) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case merchantaccount.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ma.ID = uint64(value.Int64)
		case merchantaccount.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ma.CreatedAt = value.Time
			}
		case merchantaccount.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ma.UpdatedAt = value.Time
			}
		case merchantaccount.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				ma.DeletedAt = value.Time
			}
		case merchantaccount.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field username", values[i])
			} else if value.Valid {
				ma.Username = value.String
			}
		case merchantaccount.FieldPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password", values[i])
			} else if value.Valid {
				ma.Password = value.String
			}
		case merchantaccount.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				ma.Email = value.String
			}
		case merchantaccount.FieldPhone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone", values[i])
			} else if value.Valid {
				ma.Phone = value.String
			}
		case merchantaccount.FieldIsMainAccount:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_main_account", values[i])
			} else if value.Valid {
				ma.IsMainAccount = value.Bool
			}
		case merchantaccount.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field merchant_accounts", value)
			} else if value.Valid {
				ma.merchant_accounts = new(uint64)
				*ma.merchant_accounts = uint64(value.Int64)
			}
		default:
			ma.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the MerchantAccount.
// This includes values selected through modifiers, order, etc.
func (ma *MerchantAccount) Value(name string) (ent.Value, error) {
	return ma.selectValues.Get(name)
}

// Update returns a builder for updating this MerchantAccount.
// Note that you need to call MerchantAccount.Unwrap() before calling this method if this MerchantAccount
// was returned from a transaction, and the transaction was committed or rolled back.
func (ma *MerchantAccount) Update() *MerchantAccountUpdateOne {
	return NewMerchantAccountClient(ma.config).UpdateOne(ma)
}

// Unwrap unwraps the MerchantAccount entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ma *MerchantAccount) Unwrap() *MerchantAccount {
	_tx, ok := ma.config.driver.(*txDriver)
	if !ok {
		panic("ent: MerchantAccount is not a transactional entity")
	}
	ma.config.driver = _tx.drv
	return ma
}

// String implements the fmt.Stringer.
func (ma *MerchantAccount) String() string {
	var builder strings.Builder
	builder.WriteString("MerchantAccount(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ma.ID))
	builder.WriteString("created_at=")
	builder.WriteString(ma.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ma.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(ma.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("username=")
	builder.WriteString(ma.Username)
	builder.WriteString(", ")
	builder.WriteString("password=")
	builder.WriteString(ma.Password)
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(ma.Email)
	builder.WriteString(", ")
	builder.WriteString("phone=")
	builder.WriteString(ma.Phone)
	builder.WriteString(", ")
	builder.WriteString("is_main_account=")
	builder.WriteString(fmt.Sprintf("%v", ma.IsMainAccount))
	builder.WriteByte(')')
	return builder.String()
}

// MerchantAccounts is a parsable slice of MerchantAccount.
type MerchantAccounts []*MerchantAccount
