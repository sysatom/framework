// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/sysatom/framework/ent/platformaccount"
	"github.com/sysatom/framework/ent/predicate"
)

// PlatformAccountUpdate is the builder for updating PlatformAccount entities.
type PlatformAccountUpdate struct {
	config
	hooks    []Hook
	mutation *PlatformAccountMutation
}

// Where appends a list predicates to the PlatformAccountUpdate builder.
func (pau *PlatformAccountUpdate) Where(ps ...predicate.PlatformAccount) *PlatformAccountUpdate {
	pau.mutation.Where(ps...)
	return pau
}

// SetUpdatedAt sets the "updated_at" field.
func (pau *PlatformAccountUpdate) SetUpdatedAt(t time.Time) *PlatformAccountUpdate {
	pau.mutation.SetUpdatedAt(t)
	return pau
}

// SetDeletedAt sets the "deleted_at" field.
func (pau *PlatformAccountUpdate) SetDeletedAt(t time.Time) *PlatformAccountUpdate {
	pau.mutation.SetDeletedAt(t)
	return pau
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pau *PlatformAccountUpdate) SetNillableDeletedAt(t *time.Time) *PlatformAccountUpdate {
	if t != nil {
		pau.SetDeletedAt(*t)
	}
	return pau
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (pau *PlatformAccountUpdate) ClearDeletedAt() *PlatformAccountUpdate {
	pau.mutation.ClearDeletedAt()
	return pau
}

// SetUsername sets the "username" field.
func (pau *PlatformAccountUpdate) SetUsername(s string) *PlatformAccountUpdate {
	pau.mutation.SetUsername(s)
	return pau
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (pau *PlatformAccountUpdate) SetNillableUsername(s *string) *PlatformAccountUpdate {
	if s != nil {
		pau.SetUsername(*s)
	}
	return pau
}

// SetPassword sets the "password" field.
func (pau *PlatformAccountUpdate) SetPassword(s string) *PlatformAccountUpdate {
	pau.mutation.SetPassword(s)
	return pau
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (pau *PlatformAccountUpdate) SetNillablePassword(s *string) *PlatformAccountUpdate {
	if s != nil {
		pau.SetPassword(*s)
	}
	return pau
}

// SetEmail sets the "email" field.
func (pau *PlatformAccountUpdate) SetEmail(s string) *PlatformAccountUpdate {
	pau.mutation.SetEmail(s)
	return pau
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (pau *PlatformAccountUpdate) SetNillableEmail(s *string) *PlatformAccountUpdate {
	if s != nil {
		pau.SetEmail(*s)
	}
	return pau
}

// ClearEmail clears the value of the "email" field.
func (pau *PlatformAccountUpdate) ClearEmail() *PlatformAccountUpdate {
	pau.mutation.ClearEmail()
	return pau
}

// Mutation returns the PlatformAccountMutation object of the builder.
func (pau *PlatformAccountUpdate) Mutation() *PlatformAccountMutation {
	return pau.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pau *PlatformAccountUpdate) Save(ctx context.Context) (int, error) {
	pau.defaults()
	return withHooks(ctx, pau.sqlSave, pau.mutation, pau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pau *PlatformAccountUpdate) SaveX(ctx context.Context) int {
	affected, err := pau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pau *PlatformAccountUpdate) Exec(ctx context.Context) error {
	_, err := pau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pau *PlatformAccountUpdate) ExecX(ctx context.Context) {
	if err := pau.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pau *PlatformAccountUpdate) defaults() {
	if _, ok := pau.mutation.UpdatedAt(); !ok {
		v := platformaccount.UpdateDefaultUpdatedAt()
		pau.mutation.SetUpdatedAt(v)
	}
}

func (pau *PlatformAccountUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(platformaccount.Table, platformaccount.Columns, sqlgraph.NewFieldSpec(platformaccount.FieldID, field.TypeUint64))
	if ps := pau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pau.mutation.UpdatedAt(); ok {
		_spec.SetField(platformaccount.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := pau.mutation.DeletedAt(); ok {
		_spec.SetField(platformaccount.FieldDeletedAt, field.TypeTime, value)
	}
	if pau.mutation.DeletedAtCleared() {
		_spec.ClearField(platformaccount.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := pau.mutation.Username(); ok {
		_spec.SetField(platformaccount.FieldUsername, field.TypeString, value)
	}
	if value, ok := pau.mutation.Password(); ok {
		_spec.SetField(platformaccount.FieldPassword, field.TypeString, value)
	}
	if value, ok := pau.mutation.Email(); ok {
		_spec.SetField(platformaccount.FieldEmail, field.TypeString, value)
	}
	if pau.mutation.EmailCleared() {
		_spec.ClearField(platformaccount.FieldEmail, field.TypeString)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{platformaccount.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pau.mutation.done = true
	return n, nil
}

// PlatformAccountUpdateOne is the builder for updating a single PlatformAccount entity.
type PlatformAccountUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PlatformAccountMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (pauo *PlatformAccountUpdateOne) SetUpdatedAt(t time.Time) *PlatformAccountUpdateOne {
	pauo.mutation.SetUpdatedAt(t)
	return pauo
}

// SetDeletedAt sets the "deleted_at" field.
func (pauo *PlatformAccountUpdateOne) SetDeletedAt(t time.Time) *PlatformAccountUpdateOne {
	pauo.mutation.SetDeletedAt(t)
	return pauo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pauo *PlatformAccountUpdateOne) SetNillableDeletedAt(t *time.Time) *PlatformAccountUpdateOne {
	if t != nil {
		pauo.SetDeletedAt(*t)
	}
	return pauo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (pauo *PlatformAccountUpdateOne) ClearDeletedAt() *PlatformAccountUpdateOne {
	pauo.mutation.ClearDeletedAt()
	return pauo
}

// SetUsername sets the "username" field.
func (pauo *PlatformAccountUpdateOne) SetUsername(s string) *PlatformAccountUpdateOne {
	pauo.mutation.SetUsername(s)
	return pauo
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (pauo *PlatformAccountUpdateOne) SetNillableUsername(s *string) *PlatformAccountUpdateOne {
	if s != nil {
		pauo.SetUsername(*s)
	}
	return pauo
}

// SetPassword sets the "password" field.
func (pauo *PlatformAccountUpdateOne) SetPassword(s string) *PlatformAccountUpdateOne {
	pauo.mutation.SetPassword(s)
	return pauo
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (pauo *PlatformAccountUpdateOne) SetNillablePassword(s *string) *PlatformAccountUpdateOne {
	if s != nil {
		pauo.SetPassword(*s)
	}
	return pauo
}

// SetEmail sets the "email" field.
func (pauo *PlatformAccountUpdateOne) SetEmail(s string) *PlatformAccountUpdateOne {
	pauo.mutation.SetEmail(s)
	return pauo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (pauo *PlatformAccountUpdateOne) SetNillableEmail(s *string) *PlatformAccountUpdateOne {
	if s != nil {
		pauo.SetEmail(*s)
	}
	return pauo
}

// ClearEmail clears the value of the "email" field.
func (pauo *PlatformAccountUpdateOne) ClearEmail() *PlatformAccountUpdateOne {
	pauo.mutation.ClearEmail()
	return pauo
}

// Mutation returns the PlatformAccountMutation object of the builder.
func (pauo *PlatformAccountUpdateOne) Mutation() *PlatformAccountMutation {
	return pauo.mutation
}

// Where appends a list predicates to the PlatformAccountUpdate builder.
func (pauo *PlatformAccountUpdateOne) Where(ps ...predicate.PlatformAccount) *PlatformAccountUpdateOne {
	pauo.mutation.Where(ps...)
	return pauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pauo *PlatformAccountUpdateOne) Select(field string, fields ...string) *PlatformAccountUpdateOne {
	pauo.fields = append([]string{field}, fields...)
	return pauo
}

// Save executes the query and returns the updated PlatformAccount entity.
func (pauo *PlatformAccountUpdateOne) Save(ctx context.Context) (*PlatformAccount, error) {
	pauo.defaults()
	return withHooks(ctx, pauo.sqlSave, pauo.mutation, pauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pauo *PlatformAccountUpdateOne) SaveX(ctx context.Context) *PlatformAccount {
	node, err := pauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pauo *PlatformAccountUpdateOne) Exec(ctx context.Context) error {
	_, err := pauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pauo *PlatformAccountUpdateOne) ExecX(ctx context.Context) {
	if err := pauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pauo *PlatformAccountUpdateOne) defaults() {
	if _, ok := pauo.mutation.UpdatedAt(); !ok {
		v := platformaccount.UpdateDefaultUpdatedAt()
		pauo.mutation.SetUpdatedAt(v)
	}
}

func (pauo *PlatformAccountUpdateOne) sqlSave(ctx context.Context) (_node *PlatformAccount, err error) {
	_spec := sqlgraph.NewUpdateSpec(platformaccount.Table, platformaccount.Columns, sqlgraph.NewFieldSpec(platformaccount.FieldID, field.TypeUint64))
	id, ok := pauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PlatformAccount.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, platformaccount.FieldID)
		for _, f := range fields {
			if !platformaccount.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != platformaccount.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pauo.mutation.UpdatedAt(); ok {
		_spec.SetField(platformaccount.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := pauo.mutation.DeletedAt(); ok {
		_spec.SetField(platformaccount.FieldDeletedAt, field.TypeTime, value)
	}
	if pauo.mutation.DeletedAtCleared() {
		_spec.ClearField(platformaccount.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := pauo.mutation.Username(); ok {
		_spec.SetField(platformaccount.FieldUsername, field.TypeString, value)
	}
	if value, ok := pauo.mutation.Password(); ok {
		_spec.SetField(platformaccount.FieldPassword, field.TypeString, value)
	}
	if value, ok := pauo.mutation.Email(); ok {
		_spec.SetField(platformaccount.FieldEmail, field.TypeString, value)
	}
	if pauo.mutation.EmailCleared() {
		_spec.ClearField(platformaccount.FieldEmail, field.TypeString)
	}
	_node = &PlatformAccount{config: pauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{platformaccount.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pauo.mutation.done = true
	return _node, nil
}
