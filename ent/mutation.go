// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/sysatom/framework/ent/merchant"
	"github.com/sysatom/framework/ent/merchantaccount"
	"github.com/sysatom/framework/ent/platformaccount"
	"github.com/sysatom/framework/ent/predicate"
	"github.com/sysatom/framework/ent/user"
	"github.com/sysatom/framework/ent/userloginmethod"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeMerchant        = "Merchant"
	TypeMerchantAccount = "MerchantAccount"
	TypePlatformAccount = "PlatformAccount"
	TypeUser            = "User"
	TypeUserLoginMethod = "UserLoginMethod"
)

// MerchantMutation represents an operation that mutates the Merchant nodes in the graph.
type MerchantMutation struct {
	config
	op              Op
	typ             string
	id              *int
	merchant_name   *string
	contact_person  *string
	contact_phone   *string
	country         *string
	province        *string
	city            *string
	district        *string
	address         *string
	created_at      *time.Time
	clearedFields   map[string]struct{}
	accounts        map[int]struct{}
	removedaccounts map[int]struct{}
	clearedaccounts bool
	done            bool
	oldValue        func(context.Context) (*Merchant, error)
	predicates      []predicate.Merchant
}

var _ ent.Mutation = (*MerchantMutation)(nil)

// merchantOption allows management of the mutation configuration using functional options.
type merchantOption func(*MerchantMutation)

// newMerchantMutation creates new mutation for the Merchant entity.
func newMerchantMutation(c config, op Op, opts ...merchantOption) *MerchantMutation {
	m := &MerchantMutation{
		config:        c,
		op:            op,
		typ:           TypeMerchant,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMerchantID sets the ID field of the mutation.
func withMerchantID(id int) merchantOption {
	return func(m *MerchantMutation) {
		var (
			err   error
			once  sync.Once
			value *Merchant
		)
		m.oldValue = func(ctx context.Context) (*Merchant, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Merchant.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMerchant sets the old Merchant of the mutation.
func withMerchant(node *Merchant) merchantOption {
	return func(m *MerchantMutation) {
		m.oldValue = func(context.Context) (*Merchant, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MerchantMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MerchantMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *MerchantMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *MerchantMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Merchant.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetMerchantName sets the "merchant_name" field.
func (m *MerchantMutation) SetMerchantName(s string) {
	m.merchant_name = &s
}

// MerchantName returns the value of the "merchant_name" field in the mutation.
func (m *MerchantMutation) MerchantName() (r string, exists bool) {
	v := m.merchant_name
	if v == nil {
		return
	}
	return *v, true
}

// OldMerchantName returns the old "merchant_name" field's value of the Merchant entity.
// If the Merchant object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MerchantMutation) OldMerchantName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMerchantName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMerchantName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMerchantName: %w", err)
	}
	return oldValue.MerchantName, nil
}

// ResetMerchantName resets all changes to the "merchant_name" field.
func (m *MerchantMutation) ResetMerchantName() {
	m.merchant_name = nil
}

// SetContactPerson sets the "contact_person" field.
func (m *MerchantMutation) SetContactPerson(s string) {
	m.contact_person = &s
}

// ContactPerson returns the value of the "contact_person" field in the mutation.
func (m *MerchantMutation) ContactPerson() (r string, exists bool) {
	v := m.contact_person
	if v == nil {
		return
	}
	return *v, true
}

// OldContactPerson returns the old "contact_person" field's value of the Merchant entity.
// If the Merchant object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MerchantMutation) OldContactPerson(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContactPerson is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContactPerson requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContactPerson: %w", err)
	}
	return oldValue.ContactPerson, nil
}

// ClearContactPerson clears the value of the "contact_person" field.
func (m *MerchantMutation) ClearContactPerson() {
	m.contact_person = nil
	m.clearedFields[merchant.FieldContactPerson] = struct{}{}
}

// ContactPersonCleared returns if the "contact_person" field was cleared in this mutation.
func (m *MerchantMutation) ContactPersonCleared() bool {
	_, ok := m.clearedFields[merchant.FieldContactPerson]
	return ok
}

// ResetContactPerson resets all changes to the "contact_person" field.
func (m *MerchantMutation) ResetContactPerson() {
	m.contact_person = nil
	delete(m.clearedFields, merchant.FieldContactPerson)
}

// SetContactPhone sets the "contact_phone" field.
func (m *MerchantMutation) SetContactPhone(s string) {
	m.contact_phone = &s
}

// ContactPhone returns the value of the "contact_phone" field in the mutation.
func (m *MerchantMutation) ContactPhone() (r string, exists bool) {
	v := m.contact_phone
	if v == nil {
		return
	}
	return *v, true
}

// OldContactPhone returns the old "contact_phone" field's value of the Merchant entity.
// If the Merchant object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MerchantMutation) OldContactPhone(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContactPhone is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContactPhone requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContactPhone: %w", err)
	}
	return oldValue.ContactPhone, nil
}

// ClearContactPhone clears the value of the "contact_phone" field.
func (m *MerchantMutation) ClearContactPhone() {
	m.contact_phone = nil
	m.clearedFields[merchant.FieldContactPhone] = struct{}{}
}

// ContactPhoneCleared returns if the "contact_phone" field was cleared in this mutation.
func (m *MerchantMutation) ContactPhoneCleared() bool {
	_, ok := m.clearedFields[merchant.FieldContactPhone]
	return ok
}

// ResetContactPhone resets all changes to the "contact_phone" field.
func (m *MerchantMutation) ResetContactPhone() {
	m.contact_phone = nil
	delete(m.clearedFields, merchant.FieldContactPhone)
}

// SetCountry sets the "country" field.
func (m *MerchantMutation) SetCountry(s string) {
	m.country = &s
}

// Country returns the value of the "country" field in the mutation.
func (m *MerchantMutation) Country() (r string, exists bool) {
	v := m.country
	if v == nil {
		return
	}
	return *v, true
}

// OldCountry returns the old "country" field's value of the Merchant entity.
// If the Merchant object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MerchantMutation) OldCountry(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCountry is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCountry requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCountry: %w", err)
	}
	return oldValue.Country, nil
}

// ClearCountry clears the value of the "country" field.
func (m *MerchantMutation) ClearCountry() {
	m.country = nil
	m.clearedFields[merchant.FieldCountry] = struct{}{}
}

// CountryCleared returns if the "country" field was cleared in this mutation.
func (m *MerchantMutation) CountryCleared() bool {
	_, ok := m.clearedFields[merchant.FieldCountry]
	return ok
}

// ResetCountry resets all changes to the "country" field.
func (m *MerchantMutation) ResetCountry() {
	m.country = nil
	delete(m.clearedFields, merchant.FieldCountry)
}

// SetProvince sets the "province" field.
func (m *MerchantMutation) SetProvince(s string) {
	m.province = &s
}

// Province returns the value of the "province" field in the mutation.
func (m *MerchantMutation) Province() (r string, exists bool) {
	v := m.province
	if v == nil {
		return
	}
	return *v, true
}

// OldProvince returns the old "province" field's value of the Merchant entity.
// If the Merchant object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MerchantMutation) OldProvince(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProvince is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProvince requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProvince: %w", err)
	}
	return oldValue.Province, nil
}

// ClearProvince clears the value of the "province" field.
func (m *MerchantMutation) ClearProvince() {
	m.province = nil
	m.clearedFields[merchant.FieldProvince] = struct{}{}
}

// ProvinceCleared returns if the "province" field was cleared in this mutation.
func (m *MerchantMutation) ProvinceCleared() bool {
	_, ok := m.clearedFields[merchant.FieldProvince]
	return ok
}

// ResetProvince resets all changes to the "province" field.
func (m *MerchantMutation) ResetProvince() {
	m.province = nil
	delete(m.clearedFields, merchant.FieldProvince)
}

// SetCity sets the "city" field.
func (m *MerchantMutation) SetCity(s string) {
	m.city = &s
}

// City returns the value of the "city" field in the mutation.
func (m *MerchantMutation) City() (r string, exists bool) {
	v := m.city
	if v == nil {
		return
	}
	return *v, true
}

// OldCity returns the old "city" field's value of the Merchant entity.
// If the Merchant object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MerchantMutation) OldCity(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCity is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCity requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCity: %w", err)
	}
	return oldValue.City, nil
}

// ClearCity clears the value of the "city" field.
func (m *MerchantMutation) ClearCity() {
	m.city = nil
	m.clearedFields[merchant.FieldCity] = struct{}{}
}

// CityCleared returns if the "city" field was cleared in this mutation.
func (m *MerchantMutation) CityCleared() bool {
	_, ok := m.clearedFields[merchant.FieldCity]
	return ok
}

// ResetCity resets all changes to the "city" field.
func (m *MerchantMutation) ResetCity() {
	m.city = nil
	delete(m.clearedFields, merchant.FieldCity)
}

// SetDistrict sets the "district" field.
func (m *MerchantMutation) SetDistrict(s string) {
	m.district = &s
}

// District returns the value of the "district" field in the mutation.
func (m *MerchantMutation) District() (r string, exists bool) {
	v := m.district
	if v == nil {
		return
	}
	return *v, true
}

// OldDistrict returns the old "district" field's value of the Merchant entity.
// If the Merchant object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MerchantMutation) OldDistrict(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDistrict is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDistrict requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDistrict: %w", err)
	}
	return oldValue.District, nil
}

// ClearDistrict clears the value of the "district" field.
func (m *MerchantMutation) ClearDistrict() {
	m.district = nil
	m.clearedFields[merchant.FieldDistrict] = struct{}{}
}

// DistrictCleared returns if the "district" field was cleared in this mutation.
func (m *MerchantMutation) DistrictCleared() bool {
	_, ok := m.clearedFields[merchant.FieldDistrict]
	return ok
}

// ResetDistrict resets all changes to the "district" field.
func (m *MerchantMutation) ResetDistrict() {
	m.district = nil
	delete(m.clearedFields, merchant.FieldDistrict)
}

// SetAddress sets the "address" field.
func (m *MerchantMutation) SetAddress(s string) {
	m.address = &s
}

// Address returns the value of the "address" field in the mutation.
func (m *MerchantMutation) Address() (r string, exists bool) {
	v := m.address
	if v == nil {
		return
	}
	return *v, true
}

// OldAddress returns the old "address" field's value of the Merchant entity.
// If the Merchant object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MerchantMutation) OldAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAddress: %w", err)
	}
	return oldValue.Address, nil
}

// ClearAddress clears the value of the "address" field.
func (m *MerchantMutation) ClearAddress() {
	m.address = nil
	m.clearedFields[merchant.FieldAddress] = struct{}{}
}

// AddressCleared returns if the "address" field was cleared in this mutation.
func (m *MerchantMutation) AddressCleared() bool {
	_, ok := m.clearedFields[merchant.FieldAddress]
	return ok
}

// ResetAddress resets all changes to the "address" field.
func (m *MerchantMutation) ResetAddress() {
	m.address = nil
	delete(m.clearedFields, merchant.FieldAddress)
}

// SetCreatedAt sets the "created_at" field.
func (m *MerchantMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *MerchantMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Merchant entity.
// If the Merchant object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MerchantMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *MerchantMutation) ResetCreatedAt() {
	m.created_at = nil
}

// AddAccountIDs adds the "accounts" edge to the MerchantAccount entity by ids.
func (m *MerchantMutation) AddAccountIDs(ids ...int) {
	if m.accounts == nil {
		m.accounts = make(map[int]struct{})
	}
	for i := range ids {
		m.accounts[ids[i]] = struct{}{}
	}
}

// ClearAccounts clears the "accounts" edge to the MerchantAccount entity.
func (m *MerchantMutation) ClearAccounts() {
	m.clearedaccounts = true
}

// AccountsCleared reports if the "accounts" edge to the MerchantAccount entity was cleared.
func (m *MerchantMutation) AccountsCleared() bool {
	return m.clearedaccounts
}

// RemoveAccountIDs removes the "accounts" edge to the MerchantAccount entity by IDs.
func (m *MerchantMutation) RemoveAccountIDs(ids ...int) {
	if m.removedaccounts == nil {
		m.removedaccounts = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.accounts, ids[i])
		m.removedaccounts[ids[i]] = struct{}{}
	}
}

// RemovedAccounts returns the removed IDs of the "accounts" edge to the MerchantAccount entity.
func (m *MerchantMutation) RemovedAccountsIDs() (ids []int) {
	for id := range m.removedaccounts {
		ids = append(ids, id)
	}
	return
}

// AccountsIDs returns the "accounts" edge IDs in the mutation.
func (m *MerchantMutation) AccountsIDs() (ids []int) {
	for id := range m.accounts {
		ids = append(ids, id)
	}
	return
}

// ResetAccounts resets all changes to the "accounts" edge.
func (m *MerchantMutation) ResetAccounts() {
	m.accounts = nil
	m.clearedaccounts = false
	m.removedaccounts = nil
}

// Where appends a list predicates to the MerchantMutation builder.
func (m *MerchantMutation) Where(ps ...predicate.Merchant) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the MerchantMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *MerchantMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Merchant, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *MerchantMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *MerchantMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Merchant).
func (m *MerchantMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MerchantMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.merchant_name != nil {
		fields = append(fields, merchant.FieldMerchantName)
	}
	if m.contact_person != nil {
		fields = append(fields, merchant.FieldContactPerson)
	}
	if m.contact_phone != nil {
		fields = append(fields, merchant.FieldContactPhone)
	}
	if m.country != nil {
		fields = append(fields, merchant.FieldCountry)
	}
	if m.province != nil {
		fields = append(fields, merchant.FieldProvince)
	}
	if m.city != nil {
		fields = append(fields, merchant.FieldCity)
	}
	if m.district != nil {
		fields = append(fields, merchant.FieldDistrict)
	}
	if m.address != nil {
		fields = append(fields, merchant.FieldAddress)
	}
	if m.created_at != nil {
		fields = append(fields, merchant.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MerchantMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case merchant.FieldMerchantName:
		return m.MerchantName()
	case merchant.FieldContactPerson:
		return m.ContactPerson()
	case merchant.FieldContactPhone:
		return m.ContactPhone()
	case merchant.FieldCountry:
		return m.Country()
	case merchant.FieldProvince:
		return m.Province()
	case merchant.FieldCity:
		return m.City()
	case merchant.FieldDistrict:
		return m.District()
	case merchant.FieldAddress:
		return m.Address()
	case merchant.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MerchantMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case merchant.FieldMerchantName:
		return m.OldMerchantName(ctx)
	case merchant.FieldContactPerson:
		return m.OldContactPerson(ctx)
	case merchant.FieldContactPhone:
		return m.OldContactPhone(ctx)
	case merchant.FieldCountry:
		return m.OldCountry(ctx)
	case merchant.FieldProvince:
		return m.OldProvince(ctx)
	case merchant.FieldCity:
		return m.OldCity(ctx)
	case merchant.FieldDistrict:
		return m.OldDistrict(ctx)
	case merchant.FieldAddress:
		return m.OldAddress(ctx)
	case merchant.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Merchant field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MerchantMutation) SetField(name string, value ent.Value) error {
	switch name {
	case merchant.FieldMerchantName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMerchantName(v)
		return nil
	case merchant.FieldContactPerson:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContactPerson(v)
		return nil
	case merchant.FieldContactPhone:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContactPhone(v)
		return nil
	case merchant.FieldCountry:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCountry(v)
		return nil
	case merchant.FieldProvince:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProvince(v)
		return nil
	case merchant.FieldCity:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCity(v)
		return nil
	case merchant.FieldDistrict:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDistrict(v)
		return nil
	case merchant.FieldAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAddress(v)
		return nil
	case merchant.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Merchant field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MerchantMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MerchantMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MerchantMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Merchant numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MerchantMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(merchant.FieldContactPerson) {
		fields = append(fields, merchant.FieldContactPerson)
	}
	if m.FieldCleared(merchant.FieldContactPhone) {
		fields = append(fields, merchant.FieldContactPhone)
	}
	if m.FieldCleared(merchant.FieldCountry) {
		fields = append(fields, merchant.FieldCountry)
	}
	if m.FieldCleared(merchant.FieldProvince) {
		fields = append(fields, merchant.FieldProvince)
	}
	if m.FieldCleared(merchant.FieldCity) {
		fields = append(fields, merchant.FieldCity)
	}
	if m.FieldCleared(merchant.FieldDistrict) {
		fields = append(fields, merchant.FieldDistrict)
	}
	if m.FieldCleared(merchant.FieldAddress) {
		fields = append(fields, merchant.FieldAddress)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MerchantMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MerchantMutation) ClearField(name string) error {
	switch name {
	case merchant.FieldContactPerson:
		m.ClearContactPerson()
		return nil
	case merchant.FieldContactPhone:
		m.ClearContactPhone()
		return nil
	case merchant.FieldCountry:
		m.ClearCountry()
		return nil
	case merchant.FieldProvince:
		m.ClearProvince()
		return nil
	case merchant.FieldCity:
		m.ClearCity()
		return nil
	case merchant.FieldDistrict:
		m.ClearDistrict()
		return nil
	case merchant.FieldAddress:
		m.ClearAddress()
		return nil
	}
	return fmt.Errorf("unknown Merchant nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MerchantMutation) ResetField(name string) error {
	switch name {
	case merchant.FieldMerchantName:
		m.ResetMerchantName()
		return nil
	case merchant.FieldContactPerson:
		m.ResetContactPerson()
		return nil
	case merchant.FieldContactPhone:
		m.ResetContactPhone()
		return nil
	case merchant.FieldCountry:
		m.ResetCountry()
		return nil
	case merchant.FieldProvince:
		m.ResetProvince()
		return nil
	case merchant.FieldCity:
		m.ResetCity()
		return nil
	case merchant.FieldDistrict:
		m.ResetDistrict()
		return nil
	case merchant.FieldAddress:
		m.ResetAddress()
		return nil
	case merchant.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown Merchant field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MerchantMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.accounts != nil {
		edges = append(edges, merchant.EdgeAccounts)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MerchantMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case merchant.EdgeAccounts:
		ids := make([]ent.Value, 0, len(m.accounts))
		for id := range m.accounts {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MerchantMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedaccounts != nil {
		edges = append(edges, merchant.EdgeAccounts)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MerchantMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case merchant.EdgeAccounts:
		ids := make([]ent.Value, 0, len(m.removedaccounts))
		for id := range m.removedaccounts {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MerchantMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedaccounts {
		edges = append(edges, merchant.EdgeAccounts)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MerchantMutation) EdgeCleared(name string) bool {
	switch name {
	case merchant.EdgeAccounts:
		return m.clearedaccounts
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MerchantMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Merchant unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MerchantMutation) ResetEdge(name string) error {
	switch name {
	case merchant.EdgeAccounts:
		m.ResetAccounts()
		return nil
	}
	return fmt.Errorf("unknown Merchant edge %s", name)
}

// MerchantAccountMutation represents an operation that mutates the MerchantAccount nodes in the graph.
type MerchantAccountMutation struct {
	config
	op              Op
	typ             string
	id              *int
	username        *string
	password        *string
	email           *string
	phone           *string
	is_main_account *bool
	clearedFields   map[string]struct{}
	done            bool
	oldValue        func(context.Context) (*MerchantAccount, error)
	predicates      []predicate.MerchantAccount
}

var _ ent.Mutation = (*MerchantAccountMutation)(nil)

// merchantaccountOption allows management of the mutation configuration using functional options.
type merchantaccountOption func(*MerchantAccountMutation)

// newMerchantAccountMutation creates new mutation for the MerchantAccount entity.
func newMerchantAccountMutation(c config, op Op, opts ...merchantaccountOption) *MerchantAccountMutation {
	m := &MerchantAccountMutation{
		config:        c,
		op:            op,
		typ:           TypeMerchantAccount,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMerchantAccountID sets the ID field of the mutation.
func withMerchantAccountID(id int) merchantaccountOption {
	return func(m *MerchantAccountMutation) {
		var (
			err   error
			once  sync.Once
			value *MerchantAccount
		)
		m.oldValue = func(ctx context.Context) (*MerchantAccount, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().MerchantAccount.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMerchantAccount sets the old MerchantAccount of the mutation.
func withMerchantAccount(node *MerchantAccount) merchantaccountOption {
	return func(m *MerchantAccountMutation) {
		m.oldValue = func(context.Context) (*MerchantAccount, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MerchantAccountMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MerchantAccountMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *MerchantAccountMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *MerchantAccountMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().MerchantAccount.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUsername sets the "username" field.
func (m *MerchantAccountMutation) SetUsername(s string) {
	m.username = &s
}

// Username returns the value of the "username" field in the mutation.
func (m *MerchantAccountMutation) Username() (r string, exists bool) {
	v := m.username
	if v == nil {
		return
	}
	return *v, true
}

// OldUsername returns the old "username" field's value of the MerchantAccount entity.
// If the MerchantAccount object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MerchantAccountMutation) OldUsername(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsername: %w", err)
	}
	return oldValue.Username, nil
}

// ResetUsername resets all changes to the "username" field.
func (m *MerchantAccountMutation) ResetUsername() {
	m.username = nil
}

// SetPassword sets the "password" field.
func (m *MerchantAccountMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the value of the "password" field in the mutation.
func (m *MerchantAccountMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "password" field's value of the MerchantAccount entity.
// If the MerchantAccount object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MerchantAccountMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword resets all changes to the "password" field.
func (m *MerchantAccountMutation) ResetPassword() {
	m.password = nil
}

// SetEmail sets the "email" field.
func (m *MerchantAccountMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *MerchantAccountMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the MerchantAccount entity.
// If the MerchantAccount object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MerchantAccountMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ClearEmail clears the value of the "email" field.
func (m *MerchantAccountMutation) ClearEmail() {
	m.email = nil
	m.clearedFields[merchantaccount.FieldEmail] = struct{}{}
}

// EmailCleared returns if the "email" field was cleared in this mutation.
func (m *MerchantAccountMutation) EmailCleared() bool {
	_, ok := m.clearedFields[merchantaccount.FieldEmail]
	return ok
}

// ResetEmail resets all changes to the "email" field.
func (m *MerchantAccountMutation) ResetEmail() {
	m.email = nil
	delete(m.clearedFields, merchantaccount.FieldEmail)
}

// SetPhone sets the "phone" field.
func (m *MerchantAccountMutation) SetPhone(s string) {
	m.phone = &s
}

// Phone returns the value of the "phone" field in the mutation.
func (m *MerchantAccountMutation) Phone() (r string, exists bool) {
	v := m.phone
	if v == nil {
		return
	}
	return *v, true
}

// OldPhone returns the old "phone" field's value of the MerchantAccount entity.
// If the MerchantAccount object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MerchantAccountMutation) OldPhone(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPhone is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPhone requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPhone: %w", err)
	}
	return oldValue.Phone, nil
}

// ClearPhone clears the value of the "phone" field.
func (m *MerchantAccountMutation) ClearPhone() {
	m.phone = nil
	m.clearedFields[merchantaccount.FieldPhone] = struct{}{}
}

// PhoneCleared returns if the "phone" field was cleared in this mutation.
func (m *MerchantAccountMutation) PhoneCleared() bool {
	_, ok := m.clearedFields[merchantaccount.FieldPhone]
	return ok
}

// ResetPhone resets all changes to the "phone" field.
func (m *MerchantAccountMutation) ResetPhone() {
	m.phone = nil
	delete(m.clearedFields, merchantaccount.FieldPhone)
}

// SetIsMainAccount sets the "is_main_account" field.
func (m *MerchantAccountMutation) SetIsMainAccount(b bool) {
	m.is_main_account = &b
}

// IsMainAccount returns the value of the "is_main_account" field in the mutation.
func (m *MerchantAccountMutation) IsMainAccount() (r bool, exists bool) {
	v := m.is_main_account
	if v == nil {
		return
	}
	return *v, true
}

// OldIsMainAccount returns the old "is_main_account" field's value of the MerchantAccount entity.
// If the MerchantAccount object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MerchantAccountMutation) OldIsMainAccount(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsMainAccount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsMainAccount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsMainAccount: %w", err)
	}
	return oldValue.IsMainAccount, nil
}

// ResetIsMainAccount resets all changes to the "is_main_account" field.
func (m *MerchantAccountMutation) ResetIsMainAccount() {
	m.is_main_account = nil
}

// Where appends a list predicates to the MerchantAccountMutation builder.
func (m *MerchantAccountMutation) Where(ps ...predicate.MerchantAccount) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the MerchantAccountMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *MerchantAccountMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.MerchantAccount, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *MerchantAccountMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *MerchantAccountMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (MerchantAccount).
func (m *MerchantAccountMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MerchantAccountMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.username != nil {
		fields = append(fields, merchantaccount.FieldUsername)
	}
	if m.password != nil {
		fields = append(fields, merchantaccount.FieldPassword)
	}
	if m.email != nil {
		fields = append(fields, merchantaccount.FieldEmail)
	}
	if m.phone != nil {
		fields = append(fields, merchantaccount.FieldPhone)
	}
	if m.is_main_account != nil {
		fields = append(fields, merchantaccount.FieldIsMainAccount)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MerchantAccountMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case merchantaccount.FieldUsername:
		return m.Username()
	case merchantaccount.FieldPassword:
		return m.Password()
	case merchantaccount.FieldEmail:
		return m.Email()
	case merchantaccount.FieldPhone:
		return m.Phone()
	case merchantaccount.FieldIsMainAccount:
		return m.IsMainAccount()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MerchantAccountMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case merchantaccount.FieldUsername:
		return m.OldUsername(ctx)
	case merchantaccount.FieldPassword:
		return m.OldPassword(ctx)
	case merchantaccount.FieldEmail:
		return m.OldEmail(ctx)
	case merchantaccount.FieldPhone:
		return m.OldPhone(ctx)
	case merchantaccount.FieldIsMainAccount:
		return m.OldIsMainAccount(ctx)
	}
	return nil, fmt.Errorf("unknown MerchantAccount field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MerchantAccountMutation) SetField(name string, value ent.Value) error {
	switch name {
	case merchantaccount.FieldUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsername(v)
		return nil
	case merchantaccount.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	case merchantaccount.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case merchantaccount.FieldPhone:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPhone(v)
		return nil
	case merchantaccount.FieldIsMainAccount:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsMainAccount(v)
		return nil
	}
	return fmt.Errorf("unknown MerchantAccount field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MerchantAccountMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MerchantAccountMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MerchantAccountMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown MerchantAccount numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MerchantAccountMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(merchantaccount.FieldEmail) {
		fields = append(fields, merchantaccount.FieldEmail)
	}
	if m.FieldCleared(merchantaccount.FieldPhone) {
		fields = append(fields, merchantaccount.FieldPhone)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MerchantAccountMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MerchantAccountMutation) ClearField(name string) error {
	switch name {
	case merchantaccount.FieldEmail:
		m.ClearEmail()
		return nil
	case merchantaccount.FieldPhone:
		m.ClearPhone()
		return nil
	}
	return fmt.Errorf("unknown MerchantAccount nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MerchantAccountMutation) ResetField(name string) error {
	switch name {
	case merchantaccount.FieldUsername:
		m.ResetUsername()
		return nil
	case merchantaccount.FieldPassword:
		m.ResetPassword()
		return nil
	case merchantaccount.FieldEmail:
		m.ResetEmail()
		return nil
	case merchantaccount.FieldPhone:
		m.ResetPhone()
		return nil
	case merchantaccount.FieldIsMainAccount:
		m.ResetIsMainAccount()
		return nil
	}
	return fmt.Errorf("unknown MerchantAccount field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MerchantAccountMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MerchantAccountMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MerchantAccountMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MerchantAccountMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MerchantAccountMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MerchantAccountMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MerchantAccountMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown MerchantAccount unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MerchantAccountMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown MerchantAccount edge %s", name)
}

// PlatformAccountMutation represents an operation that mutates the PlatformAccount nodes in the graph.
type PlatformAccountMutation struct {
	config
	op            Op
	typ           string
	id            *int
	username      *string
	password      *string
	email         *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*PlatformAccount, error)
	predicates    []predicate.PlatformAccount
}

var _ ent.Mutation = (*PlatformAccountMutation)(nil)

// platformaccountOption allows management of the mutation configuration using functional options.
type platformaccountOption func(*PlatformAccountMutation)

// newPlatformAccountMutation creates new mutation for the PlatformAccount entity.
func newPlatformAccountMutation(c config, op Op, opts ...platformaccountOption) *PlatformAccountMutation {
	m := &PlatformAccountMutation{
		config:        c,
		op:            op,
		typ:           TypePlatformAccount,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPlatformAccountID sets the ID field of the mutation.
func withPlatformAccountID(id int) platformaccountOption {
	return func(m *PlatformAccountMutation) {
		var (
			err   error
			once  sync.Once
			value *PlatformAccount
		)
		m.oldValue = func(ctx context.Context) (*PlatformAccount, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().PlatformAccount.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPlatformAccount sets the old PlatformAccount of the mutation.
func withPlatformAccount(node *PlatformAccount) platformaccountOption {
	return func(m *PlatformAccountMutation) {
		m.oldValue = func(context.Context) (*PlatformAccount, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PlatformAccountMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PlatformAccountMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PlatformAccountMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PlatformAccountMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().PlatformAccount.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUsername sets the "username" field.
func (m *PlatformAccountMutation) SetUsername(s string) {
	m.username = &s
}

// Username returns the value of the "username" field in the mutation.
func (m *PlatformAccountMutation) Username() (r string, exists bool) {
	v := m.username
	if v == nil {
		return
	}
	return *v, true
}

// OldUsername returns the old "username" field's value of the PlatformAccount entity.
// If the PlatformAccount object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PlatformAccountMutation) OldUsername(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsername: %w", err)
	}
	return oldValue.Username, nil
}

// ResetUsername resets all changes to the "username" field.
func (m *PlatformAccountMutation) ResetUsername() {
	m.username = nil
}

// SetPassword sets the "password" field.
func (m *PlatformAccountMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the value of the "password" field in the mutation.
func (m *PlatformAccountMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "password" field's value of the PlatformAccount entity.
// If the PlatformAccount object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PlatformAccountMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword resets all changes to the "password" field.
func (m *PlatformAccountMutation) ResetPassword() {
	m.password = nil
}

// SetEmail sets the "email" field.
func (m *PlatformAccountMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *PlatformAccountMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the PlatformAccount entity.
// If the PlatformAccount object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PlatformAccountMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ClearEmail clears the value of the "email" field.
func (m *PlatformAccountMutation) ClearEmail() {
	m.email = nil
	m.clearedFields[platformaccount.FieldEmail] = struct{}{}
}

// EmailCleared returns if the "email" field was cleared in this mutation.
func (m *PlatformAccountMutation) EmailCleared() bool {
	_, ok := m.clearedFields[platformaccount.FieldEmail]
	return ok
}

// ResetEmail resets all changes to the "email" field.
func (m *PlatformAccountMutation) ResetEmail() {
	m.email = nil
	delete(m.clearedFields, platformaccount.FieldEmail)
}

// Where appends a list predicates to the PlatformAccountMutation builder.
func (m *PlatformAccountMutation) Where(ps ...predicate.PlatformAccount) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the PlatformAccountMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *PlatformAccountMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.PlatformAccount, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *PlatformAccountMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *PlatformAccountMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (PlatformAccount).
func (m *PlatformAccountMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PlatformAccountMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.username != nil {
		fields = append(fields, platformaccount.FieldUsername)
	}
	if m.password != nil {
		fields = append(fields, platformaccount.FieldPassword)
	}
	if m.email != nil {
		fields = append(fields, platformaccount.FieldEmail)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PlatformAccountMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case platformaccount.FieldUsername:
		return m.Username()
	case platformaccount.FieldPassword:
		return m.Password()
	case platformaccount.FieldEmail:
		return m.Email()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PlatformAccountMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case platformaccount.FieldUsername:
		return m.OldUsername(ctx)
	case platformaccount.FieldPassword:
		return m.OldPassword(ctx)
	case platformaccount.FieldEmail:
		return m.OldEmail(ctx)
	}
	return nil, fmt.Errorf("unknown PlatformAccount field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PlatformAccountMutation) SetField(name string, value ent.Value) error {
	switch name {
	case platformaccount.FieldUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsername(v)
		return nil
	case platformaccount.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	case platformaccount.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	}
	return fmt.Errorf("unknown PlatformAccount field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PlatformAccountMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PlatformAccountMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PlatformAccountMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown PlatformAccount numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PlatformAccountMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(platformaccount.FieldEmail) {
		fields = append(fields, platformaccount.FieldEmail)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PlatformAccountMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PlatformAccountMutation) ClearField(name string) error {
	switch name {
	case platformaccount.FieldEmail:
		m.ClearEmail()
		return nil
	}
	return fmt.Errorf("unknown PlatformAccount nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PlatformAccountMutation) ResetField(name string) error {
	switch name {
	case platformaccount.FieldUsername:
		m.ResetUsername()
		return nil
	case platformaccount.FieldPassword:
		m.ResetPassword()
		return nil
	case platformaccount.FieldEmail:
		m.ResetEmail()
		return nil
	}
	return fmt.Errorf("unknown PlatformAccount field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PlatformAccountMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PlatformAccountMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PlatformAccountMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PlatformAccountMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PlatformAccountMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PlatformAccountMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PlatformAccountMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown PlatformAccount unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PlatformAccountMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown PlatformAccount edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                      Op
	typ                     string
	id                      *int
	username                *string
	phone                   *string
	email                   *string
	clearedFields           map[string]struct{}
	login_methods           map[int]struct{}
	removedlogin_methods    map[int]struct{}
	clearedlogin_methods    bool
	introducer              *int
	clearedintroducer       bool
	default_merchant        *int
	cleareddefault_merchant bool
	done                    bool
	oldValue                func(context.Context) (*User, error)
	predicates              []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUsername sets the "username" field.
func (m *UserMutation) SetUsername(s string) {
	m.username = &s
}

// Username returns the value of the "username" field in the mutation.
func (m *UserMutation) Username() (r string, exists bool) {
	v := m.username
	if v == nil {
		return
	}
	return *v, true
}

// OldUsername returns the old "username" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUsername(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsername: %w", err)
	}
	return oldValue.Username, nil
}

// ResetUsername resets all changes to the "username" field.
func (m *UserMutation) ResetUsername() {
	m.username = nil
}

// SetPhone sets the "phone" field.
func (m *UserMutation) SetPhone(s string) {
	m.phone = &s
}

// Phone returns the value of the "phone" field in the mutation.
func (m *UserMutation) Phone() (r string, exists bool) {
	v := m.phone
	if v == nil {
		return
	}
	return *v, true
}

// OldPhone returns the old "phone" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPhone(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPhone is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPhone requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPhone: %w", err)
	}
	return oldValue.Phone, nil
}

// ClearPhone clears the value of the "phone" field.
func (m *UserMutation) ClearPhone() {
	m.phone = nil
	m.clearedFields[user.FieldPhone] = struct{}{}
}

// PhoneCleared returns if the "phone" field was cleared in this mutation.
func (m *UserMutation) PhoneCleared() bool {
	_, ok := m.clearedFields[user.FieldPhone]
	return ok
}

// ResetPhone resets all changes to the "phone" field.
func (m *UserMutation) ResetPhone() {
	m.phone = nil
	delete(m.clearedFields, user.FieldPhone)
}

// SetEmail sets the "email" field.
func (m *UserMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *UserMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ClearEmail clears the value of the "email" field.
func (m *UserMutation) ClearEmail() {
	m.email = nil
	m.clearedFields[user.FieldEmail] = struct{}{}
}

// EmailCleared returns if the "email" field was cleared in this mutation.
func (m *UserMutation) EmailCleared() bool {
	_, ok := m.clearedFields[user.FieldEmail]
	return ok
}

// ResetEmail resets all changes to the "email" field.
func (m *UserMutation) ResetEmail() {
	m.email = nil
	delete(m.clearedFields, user.FieldEmail)
}

// AddLoginMethodIDs adds the "login_methods" edge to the UserLoginMethod entity by ids.
func (m *UserMutation) AddLoginMethodIDs(ids ...int) {
	if m.login_methods == nil {
		m.login_methods = make(map[int]struct{})
	}
	for i := range ids {
		m.login_methods[ids[i]] = struct{}{}
	}
}

// ClearLoginMethods clears the "login_methods" edge to the UserLoginMethod entity.
func (m *UserMutation) ClearLoginMethods() {
	m.clearedlogin_methods = true
}

// LoginMethodsCleared reports if the "login_methods" edge to the UserLoginMethod entity was cleared.
func (m *UserMutation) LoginMethodsCleared() bool {
	return m.clearedlogin_methods
}

// RemoveLoginMethodIDs removes the "login_methods" edge to the UserLoginMethod entity by IDs.
func (m *UserMutation) RemoveLoginMethodIDs(ids ...int) {
	if m.removedlogin_methods == nil {
		m.removedlogin_methods = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.login_methods, ids[i])
		m.removedlogin_methods[ids[i]] = struct{}{}
	}
}

// RemovedLoginMethods returns the removed IDs of the "login_methods" edge to the UserLoginMethod entity.
func (m *UserMutation) RemovedLoginMethodsIDs() (ids []int) {
	for id := range m.removedlogin_methods {
		ids = append(ids, id)
	}
	return
}

// LoginMethodsIDs returns the "login_methods" edge IDs in the mutation.
func (m *UserMutation) LoginMethodsIDs() (ids []int) {
	for id := range m.login_methods {
		ids = append(ids, id)
	}
	return
}

// ResetLoginMethods resets all changes to the "login_methods" edge.
func (m *UserMutation) ResetLoginMethods() {
	m.login_methods = nil
	m.clearedlogin_methods = false
	m.removedlogin_methods = nil
}

// SetIntroducerID sets the "introducer" edge to the UserLoginMethod entity by id.
func (m *UserMutation) SetIntroducerID(id int) {
	m.introducer = &id
}

// ClearIntroducer clears the "introducer" edge to the UserLoginMethod entity.
func (m *UserMutation) ClearIntroducer() {
	m.clearedintroducer = true
}

// IntroducerCleared reports if the "introducer" edge to the UserLoginMethod entity was cleared.
func (m *UserMutation) IntroducerCleared() bool {
	return m.clearedintroducer
}

// IntroducerID returns the "introducer" edge ID in the mutation.
func (m *UserMutation) IntroducerID() (id int, exists bool) {
	if m.introducer != nil {
		return *m.introducer, true
	}
	return
}

// IntroducerIDs returns the "introducer" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// IntroducerID instead. It exists only for internal usage by the builders.
func (m *UserMutation) IntroducerIDs() (ids []int) {
	if id := m.introducer; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetIntroducer resets all changes to the "introducer" edge.
func (m *UserMutation) ResetIntroducer() {
	m.introducer = nil
	m.clearedintroducer = false
}

// SetDefaultMerchantID sets the "default_merchant" edge to the Merchant entity by id.
func (m *UserMutation) SetDefaultMerchantID(id int) {
	m.default_merchant = &id
}

// ClearDefaultMerchant clears the "default_merchant" edge to the Merchant entity.
func (m *UserMutation) ClearDefaultMerchant() {
	m.cleareddefault_merchant = true
}

// DefaultMerchantCleared reports if the "default_merchant" edge to the Merchant entity was cleared.
func (m *UserMutation) DefaultMerchantCleared() bool {
	return m.cleareddefault_merchant
}

// DefaultMerchantID returns the "default_merchant" edge ID in the mutation.
func (m *UserMutation) DefaultMerchantID() (id int, exists bool) {
	if m.default_merchant != nil {
		return *m.default_merchant, true
	}
	return
}

// DefaultMerchantIDs returns the "default_merchant" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// DefaultMerchantID instead. It exists only for internal usage by the builders.
func (m *UserMutation) DefaultMerchantIDs() (ids []int) {
	if id := m.default_merchant; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetDefaultMerchant resets all changes to the "default_merchant" edge.
func (m *UserMutation) ResetDefaultMerchant() {
	m.default_merchant = nil
	m.cleareddefault_merchant = false
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.username != nil {
		fields = append(fields, user.FieldUsername)
	}
	if m.phone != nil {
		fields = append(fields, user.FieldPhone)
	}
	if m.email != nil {
		fields = append(fields, user.FieldEmail)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldUsername:
		return m.Username()
	case user.FieldPhone:
		return m.Phone()
	case user.FieldEmail:
		return m.Email()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldUsername:
		return m.OldUsername(ctx)
	case user.FieldPhone:
		return m.OldPhone(ctx)
	case user.FieldEmail:
		return m.OldEmail(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsername(v)
		return nil
	case user.FieldPhone:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPhone(v)
		return nil
	case user.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(user.FieldPhone) {
		fields = append(fields, user.FieldPhone)
	}
	if m.FieldCleared(user.FieldEmail) {
		fields = append(fields, user.FieldEmail)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	switch name {
	case user.FieldPhone:
		m.ClearPhone()
		return nil
	case user.FieldEmail:
		m.ClearEmail()
		return nil
	}
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldUsername:
		m.ResetUsername()
		return nil
	case user.FieldPhone:
		m.ResetPhone()
		return nil
	case user.FieldEmail:
		m.ResetEmail()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.login_methods != nil {
		edges = append(edges, user.EdgeLoginMethods)
	}
	if m.introducer != nil {
		edges = append(edges, user.EdgeIntroducer)
	}
	if m.default_merchant != nil {
		edges = append(edges, user.EdgeDefaultMerchant)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeLoginMethods:
		ids := make([]ent.Value, 0, len(m.login_methods))
		for id := range m.login_methods {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeIntroducer:
		if id := m.introducer; id != nil {
			return []ent.Value{*id}
		}
	case user.EdgeDefaultMerchant:
		if id := m.default_merchant; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedlogin_methods != nil {
		edges = append(edges, user.EdgeLoginMethods)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeLoginMethods:
		ids := make([]ent.Value, 0, len(m.removedlogin_methods))
		for id := range m.removedlogin_methods {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedlogin_methods {
		edges = append(edges, user.EdgeLoginMethods)
	}
	if m.clearedintroducer {
		edges = append(edges, user.EdgeIntroducer)
	}
	if m.cleareddefault_merchant {
		edges = append(edges, user.EdgeDefaultMerchant)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeLoginMethods:
		return m.clearedlogin_methods
	case user.EdgeIntroducer:
		return m.clearedintroducer
	case user.EdgeDefaultMerchant:
		return m.cleareddefault_merchant
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	case user.EdgeIntroducer:
		m.ClearIntroducer()
		return nil
	case user.EdgeDefaultMerchant:
		m.ClearDefaultMerchant()
		return nil
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeLoginMethods:
		m.ResetLoginMethods()
		return nil
	case user.EdgeIntroducer:
		m.ResetIntroducer()
		return nil
	case user.EdgeDefaultMerchant:
		m.ResetDefaultMerchant()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}

// UserLoginMethodMutation represents an operation that mutates the UserLoginMethod nodes in the graph.
type UserLoginMethodMutation struct {
	config
	op            Op
	typ           string
	id            *int
	login_type    *string
	identifier    *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*UserLoginMethod, error)
	predicates    []predicate.UserLoginMethod
}

var _ ent.Mutation = (*UserLoginMethodMutation)(nil)

// userloginmethodOption allows management of the mutation configuration using functional options.
type userloginmethodOption func(*UserLoginMethodMutation)

// newUserLoginMethodMutation creates new mutation for the UserLoginMethod entity.
func newUserLoginMethodMutation(c config, op Op, opts ...userloginmethodOption) *UserLoginMethodMutation {
	m := &UserLoginMethodMutation{
		config:        c,
		op:            op,
		typ:           TypeUserLoginMethod,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserLoginMethodID sets the ID field of the mutation.
func withUserLoginMethodID(id int) userloginmethodOption {
	return func(m *UserLoginMethodMutation) {
		var (
			err   error
			once  sync.Once
			value *UserLoginMethod
		)
		m.oldValue = func(ctx context.Context) (*UserLoginMethod, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().UserLoginMethod.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUserLoginMethod sets the old UserLoginMethod of the mutation.
func withUserLoginMethod(node *UserLoginMethod) userloginmethodOption {
	return func(m *UserLoginMethodMutation) {
		m.oldValue = func(context.Context) (*UserLoginMethod, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserLoginMethodMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserLoginMethodMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserLoginMethodMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserLoginMethodMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().UserLoginMethod.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetLoginType sets the "login_type" field.
func (m *UserLoginMethodMutation) SetLoginType(s string) {
	m.login_type = &s
}

// LoginType returns the value of the "login_type" field in the mutation.
func (m *UserLoginMethodMutation) LoginType() (r string, exists bool) {
	v := m.login_type
	if v == nil {
		return
	}
	return *v, true
}

// OldLoginType returns the old "login_type" field's value of the UserLoginMethod entity.
// If the UserLoginMethod object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserLoginMethodMutation) OldLoginType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLoginType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLoginType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLoginType: %w", err)
	}
	return oldValue.LoginType, nil
}

// ResetLoginType resets all changes to the "login_type" field.
func (m *UserLoginMethodMutation) ResetLoginType() {
	m.login_type = nil
}

// SetIdentifier sets the "identifier" field.
func (m *UserLoginMethodMutation) SetIdentifier(s string) {
	m.identifier = &s
}

// Identifier returns the value of the "identifier" field in the mutation.
func (m *UserLoginMethodMutation) Identifier() (r string, exists bool) {
	v := m.identifier
	if v == nil {
		return
	}
	return *v, true
}

// OldIdentifier returns the old "identifier" field's value of the UserLoginMethod entity.
// If the UserLoginMethod object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserLoginMethodMutation) OldIdentifier(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIdentifier is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIdentifier requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIdentifier: %w", err)
	}
	return oldValue.Identifier, nil
}

// ResetIdentifier resets all changes to the "identifier" field.
func (m *UserLoginMethodMutation) ResetIdentifier() {
	m.identifier = nil
}

// Where appends a list predicates to the UserLoginMethodMutation builder.
func (m *UserLoginMethodMutation) Where(ps ...predicate.UserLoginMethod) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserLoginMethodMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserLoginMethodMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.UserLoginMethod, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserLoginMethodMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserLoginMethodMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (UserLoginMethod).
func (m *UserLoginMethodMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserLoginMethodMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.login_type != nil {
		fields = append(fields, userloginmethod.FieldLoginType)
	}
	if m.identifier != nil {
		fields = append(fields, userloginmethod.FieldIdentifier)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserLoginMethodMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case userloginmethod.FieldLoginType:
		return m.LoginType()
	case userloginmethod.FieldIdentifier:
		return m.Identifier()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserLoginMethodMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case userloginmethod.FieldLoginType:
		return m.OldLoginType(ctx)
	case userloginmethod.FieldIdentifier:
		return m.OldIdentifier(ctx)
	}
	return nil, fmt.Errorf("unknown UserLoginMethod field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserLoginMethodMutation) SetField(name string, value ent.Value) error {
	switch name {
	case userloginmethod.FieldLoginType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLoginType(v)
		return nil
	case userloginmethod.FieldIdentifier:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIdentifier(v)
		return nil
	}
	return fmt.Errorf("unknown UserLoginMethod field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserLoginMethodMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserLoginMethodMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserLoginMethodMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown UserLoginMethod numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserLoginMethodMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserLoginMethodMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserLoginMethodMutation) ClearField(name string) error {
	return fmt.Errorf("unknown UserLoginMethod nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserLoginMethodMutation) ResetField(name string) error {
	switch name {
	case userloginmethod.FieldLoginType:
		m.ResetLoginType()
		return nil
	case userloginmethod.FieldIdentifier:
		m.ResetIdentifier()
		return nil
	}
	return fmt.Errorf("unknown UserLoginMethod field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserLoginMethodMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserLoginMethodMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserLoginMethodMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserLoginMethodMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserLoginMethodMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserLoginMethodMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserLoginMethodMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown UserLoginMethod unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserLoginMethodMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown UserLoginMethod edge %s", name)
}
