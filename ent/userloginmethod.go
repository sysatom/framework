// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/sysatom/framework/ent/userloginmethod"
)

// UserLoginMethod is the model entity for the UserLoginMethod schema.
type UserLoginMethod struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// LoginType holds the value of the "login_type" field.
	LoginType string `json:"login_type,omitempty"`
	// Identifier holds the value of the "identifier" field.
	Identifier         string `json:"identifier,omitempty"`
	user_login_methods *uint64
	selectValues       sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserLoginMethod) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case userloginmethod.FieldID:
			values[i] = new(sql.NullInt64)
		case userloginmethod.FieldLoginType, userloginmethod.FieldIdentifier:
			values[i] = new(sql.NullString)
		case userloginmethod.ForeignKeys[0]: // user_login_methods
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserLoginMethod fields.
func (ulm *UserLoginMethod) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case userloginmethod.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ulm.ID = uint64(value.Int64)
		case userloginmethod.FieldLoginType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field login_type", values[i])
			} else if value.Valid {
				ulm.LoginType = value.String
			}
		case userloginmethod.FieldIdentifier:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field identifier", values[i])
			} else if value.Valid {
				ulm.Identifier = value.String
			}
		case userloginmethod.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_login_methods", value)
			} else if value.Valid {
				ulm.user_login_methods = new(uint64)
				*ulm.user_login_methods = uint64(value.Int64)
			}
		default:
			ulm.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UserLoginMethod.
// This includes values selected through modifiers, order, etc.
func (ulm *UserLoginMethod) Value(name string) (ent.Value, error) {
	return ulm.selectValues.Get(name)
}

// Update returns a builder for updating this UserLoginMethod.
// Note that you need to call UserLoginMethod.Unwrap() before calling this method if this UserLoginMethod
// was returned from a transaction, and the transaction was committed or rolled back.
func (ulm *UserLoginMethod) Update() *UserLoginMethodUpdateOne {
	return NewUserLoginMethodClient(ulm.config).UpdateOne(ulm)
}

// Unwrap unwraps the UserLoginMethod entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ulm *UserLoginMethod) Unwrap() *UserLoginMethod {
	_tx, ok := ulm.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserLoginMethod is not a transactional entity")
	}
	ulm.config.driver = _tx.drv
	return ulm
}

// String implements the fmt.Stringer.
func (ulm *UserLoginMethod) String() string {
	var builder strings.Builder
	builder.WriteString("UserLoginMethod(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ulm.ID))
	builder.WriteString("login_type=")
	builder.WriteString(ulm.LoginType)
	builder.WriteString(", ")
	builder.WriteString("identifier=")
	builder.WriteString(ulm.Identifier)
	builder.WriteByte(')')
	return builder.String()
}

// UserLoginMethods is a parsable slice of UserLoginMethod.
type UserLoginMethods []*UserLoginMethod
