// Code generated by ent, DO NOT EDIT.

package user

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUsername holds the string denoting the username field in the database.
	FieldUsername = "username"
	// FieldPhone holds the string denoting the phone field in the database.
	FieldPhone = "phone"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// EdgeLoginMethods holds the string denoting the login_methods edge name in mutations.
	EdgeLoginMethods = "login_methods"
	// EdgeIntroducer holds the string denoting the introducer edge name in mutations.
	EdgeIntroducer = "introducer"
	// EdgeDefaultMerchant holds the string denoting the default_merchant edge name in mutations.
	EdgeDefaultMerchant = "default_merchant"
	// Table holds the table name of the user in the database.
	Table = "users"
	// LoginMethodsTable is the table that holds the login_methods relation/edge.
	LoginMethodsTable = "user_login_methods"
	// LoginMethodsInverseTable is the table name for the UserLoginMethod entity.
	// It exists in this package in order to avoid circular dependency with the "userloginmethod" package.
	LoginMethodsInverseTable = "user_login_methods"
	// LoginMethodsColumn is the table column denoting the login_methods relation/edge.
	LoginMethodsColumn = "user_login_methods"
	// IntroducerTable is the table that holds the introducer relation/edge.
	IntroducerTable = "users"
	// IntroducerInverseTable is the table name for the UserLoginMethod entity.
	// It exists in this package in order to avoid circular dependency with the "userloginmethod" package.
	IntroducerInverseTable = "user_login_methods"
	// IntroducerColumn is the table column denoting the introducer relation/edge.
	IntroducerColumn = "user_introducer"
	// DefaultMerchantTable is the table that holds the default_merchant relation/edge.
	DefaultMerchantTable = "users"
	// DefaultMerchantInverseTable is the table name for the Merchant entity.
	// It exists in this package in order to avoid circular dependency with the "merchant" package.
	DefaultMerchantInverseTable = "merchants"
	// DefaultMerchantColumn is the table column denoting the default_merchant relation/edge.
	DefaultMerchantColumn = "user_default_merchant"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldUsername,
	FieldPhone,
	FieldEmail,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "users"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_introducer",
	"user_default_merchant",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultPhone holds the default value on creation for the "phone" field.
	DefaultPhone string
	// DefaultEmail holds the default value on creation for the "email" field.
	DefaultEmail string
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uint64
)

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUsername orders the results by the username field.
func ByUsername(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsername, opts...).ToFunc()
}

// ByPhone orders the results by the phone field.
func ByPhone(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPhone, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByLoginMethodsCount orders the results by login_methods count.
func ByLoginMethodsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newLoginMethodsStep(), opts...)
	}
}

// ByLoginMethods orders the results by login_methods terms.
func ByLoginMethods(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLoginMethodsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByIntroducerField orders the results by introducer field.
func ByIntroducerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newIntroducerStep(), sql.OrderByField(field, opts...))
	}
}

// ByDefaultMerchantField orders the results by default_merchant field.
func ByDefaultMerchantField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDefaultMerchantStep(), sql.OrderByField(field, opts...))
	}
}
func newLoginMethodsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LoginMethodsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, LoginMethodsTable, LoginMethodsColumn),
	)
}
func newIntroducerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(IntroducerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, IntroducerTable, IntroducerColumn),
	)
}
func newDefaultMerchantStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DefaultMerchantInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, DefaultMerchantTable, DefaultMerchantColumn),
	)
}
