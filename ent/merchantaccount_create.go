// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/sysatom/framework/ent/merchantaccount"
)

// MerchantAccountCreate is the builder for creating a MerchantAccount entity.
type MerchantAccountCreate struct {
	config
	mutation *MerchantAccountMutation
	hooks    []Hook
}

// SetUsername sets the "username" field.
func (mac *MerchantAccountCreate) SetUsername(s string) *MerchantAccountCreate {
	mac.mutation.SetUsername(s)
	return mac
}

// SetPassword sets the "password" field.
func (mac *MerchantAccountCreate) SetPassword(s string) *MerchantAccountCreate {
	mac.mutation.SetPassword(s)
	return mac
}

// SetEmail sets the "email" field.
func (mac *MerchantAccountCreate) SetEmail(s string) *MerchantAccountCreate {
	mac.mutation.SetEmail(s)
	return mac
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (mac *MerchantAccountCreate) SetNillableEmail(s *string) *MerchantAccountCreate {
	if s != nil {
		mac.SetEmail(*s)
	}
	return mac
}

// SetPhone sets the "phone" field.
func (mac *MerchantAccountCreate) SetPhone(s string) *MerchantAccountCreate {
	mac.mutation.SetPhone(s)
	return mac
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (mac *MerchantAccountCreate) SetNillablePhone(s *string) *MerchantAccountCreate {
	if s != nil {
		mac.SetPhone(*s)
	}
	return mac
}

// SetIsMainAccount sets the "is_main_account" field.
func (mac *MerchantAccountCreate) SetIsMainAccount(b bool) *MerchantAccountCreate {
	mac.mutation.SetIsMainAccount(b)
	return mac
}

// SetNillableIsMainAccount sets the "is_main_account" field if the given value is not nil.
func (mac *MerchantAccountCreate) SetNillableIsMainAccount(b *bool) *MerchantAccountCreate {
	if b != nil {
		mac.SetIsMainAccount(*b)
	}
	return mac
}

// Mutation returns the MerchantAccountMutation object of the builder.
func (mac *MerchantAccountCreate) Mutation() *MerchantAccountMutation {
	return mac.mutation
}

// Save creates the MerchantAccount in the database.
func (mac *MerchantAccountCreate) Save(ctx context.Context) (*MerchantAccount, error) {
	mac.defaults()
	return withHooks(ctx, mac.sqlSave, mac.mutation, mac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mac *MerchantAccountCreate) SaveX(ctx context.Context) *MerchantAccount {
	v, err := mac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mac *MerchantAccountCreate) Exec(ctx context.Context) error {
	_, err := mac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mac *MerchantAccountCreate) ExecX(ctx context.Context) {
	if err := mac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mac *MerchantAccountCreate) defaults() {
	if _, ok := mac.mutation.Email(); !ok {
		v := merchantaccount.DefaultEmail
		mac.mutation.SetEmail(v)
	}
	if _, ok := mac.mutation.Phone(); !ok {
		v := merchantaccount.DefaultPhone
		mac.mutation.SetPhone(v)
	}
	if _, ok := mac.mutation.IsMainAccount(); !ok {
		v := merchantaccount.DefaultIsMainAccount
		mac.mutation.SetIsMainAccount(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mac *MerchantAccountCreate) check() error {
	if _, ok := mac.mutation.Username(); !ok {
		return &ValidationError{Name: "username", err: errors.New(`ent: missing required field "MerchantAccount.username"`)}
	}
	if _, ok := mac.mutation.Password(); !ok {
		return &ValidationError{Name: "password", err: errors.New(`ent: missing required field "MerchantAccount.password"`)}
	}
	if _, ok := mac.mutation.IsMainAccount(); !ok {
		return &ValidationError{Name: "is_main_account", err: errors.New(`ent: missing required field "MerchantAccount.is_main_account"`)}
	}
	return nil
}

func (mac *MerchantAccountCreate) sqlSave(ctx context.Context) (*MerchantAccount, error) {
	if err := mac.check(); err != nil {
		return nil, err
	}
	_node, _spec := mac.createSpec()
	if err := sqlgraph.CreateNode(ctx, mac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	mac.mutation.id = &_node.ID
	mac.mutation.done = true
	return _node, nil
}

func (mac *MerchantAccountCreate) createSpec() (*MerchantAccount, *sqlgraph.CreateSpec) {
	var (
		_node = &MerchantAccount{config: mac.config}
		_spec = sqlgraph.NewCreateSpec(merchantaccount.Table, sqlgraph.NewFieldSpec(merchantaccount.FieldID, field.TypeInt))
	)
	if value, ok := mac.mutation.Username(); ok {
		_spec.SetField(merchantaccount.FieldUsername, field.TypeString, value)
		_node.Username = value
	}
	if value, ok := mac.mutation.Password(); ok {
		_spec.SetField(merchantaccount.FieldPassword, field.TypeString, value)
		_node.Password = value
	}
	if value, ok := mac.mutation.Email(); ok {
		_spec.SetField(merchantaccount.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := mac.mutation.Phone(); ok {
		_spec.SetField(merchantaccount.FieldPhone, field.TypeString, value)
		_node.Phone = value
	}
	if value, ok := mac.mutation.IsMainAccount(); ok {
		_spec.SetField(merchantaccount.FieldIsMainAccount, field.TypeBool, value)
		_node.IsMainAccount = value
	}
	return _node, _spec
}

// MerchantAccountCreateBulk is the builder for creating many MerchantAccount entities in bulk.
type MerchantAccountCreateBulk struct {
	config
	err      error
	builders []*MerchantAccountCreate
}

// Save creates the MerchantAccount entities in the database.
func (macb *MerchantAccountCreateBulk) Save(ctx context.Context) ([]*MerchantAccount, error) {
	if macb.err != nil {
		return nil, macb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(macb.builders))
	nodes := make([]*MerchantAccount, len(macb.builders))
	mutators := make([]Mutator, len(macb.builders))
	for i := range macb.builders {
		func(i int, root context.Context) {
			builder := macb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MerchantAccountMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, macb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, macb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, macb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (macb *MerchantAccountCreateBulk) SaveX(ctx context.Context) []*MerchantAccount {
	v, err := macb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (macb *MerchantAccountCreateBulk) Exec(ctx context.Context) error {
	_, err := macb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (macb *MerchantAccountCreateBulk) ExecX(ctx context.Context) {
	if err := macb.Exec(ctx); err != nil {
		panic(err)
	}
}
