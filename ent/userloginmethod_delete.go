// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/sysatom/framework/ent/predicate"
	"github.com/sysatom/framework/ent/userloginmethod"
)

// UserLoginMethodDelete is the builder for deleting a UserLoginMethod entity.
type UserLoginMethodDelete struct {
	config
	hooks    []Hook
	mutation *UserLoginMethodMutation
}

// Where appends a list predicates to the UserLoginMethodDelete builder.
func (ulmd *UserLoginMethodDelete) Where(ps ...predicate.UserLoginMethod) *UserLoginMethodDelete {
	ulmd.mutation.Where(ps...)
	return ulmd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ulmd *UserLoginMethodDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, ulmd.sqlExec, ulmd.mutation, ulmd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (ulmd *UserLoginMethodDelete) ExecX(ctx context.Context) int {
	n, err := ulmd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (ulmd *UserLoginMethodDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(userloginmethod.Table, sqlgraph.NewFieldSpec(userloginmethod.FieldID, field.TypeUint64))
	if ps := ulmd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, ulmd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	ulmd.mutation.done = true
	return affected, err
}

// UserLoginMethodDeleteOne is the builder for deleting a single UserLoginMethod entity.
type UserLoginMethodDeleteOne struct {
	ulmd *UserLoginMethodDelete
}

// Where appends a list predicates to the UserLoginMethodDelete builder.
func (ulmdo *UserLoginMethodDeleteOne) Where(ps ...predicate.UserLoginMethod) *UserLoginMethodDeleteOne {
	ulmdo.ulmd.mutation.Where(ps...)
	return ulmdo
}

// Exec executes the deletion query.
func (ulmdo *UserLoginMethodDeleteOne) Exec(ctx context.Context) error {
	n, err := ulmdo.ulmd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{userloginmethod.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (ulmdo *UserLoginMethodDeleteOne) ExecX(ctx context.Context) {
	if err := ulmdo.Exec(ctx); err != nil {
		panic(err)
	}
}
