// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/sysatom/framework/ent/predicate"
	"github.com/sysatom/framework/ent/userloginmethod"
)

// UserLoginMethodUpdate is the builder for updating UserLoginMethod entities.
type UserLoginMethodUpdate struct {
	config
	hooks    []Hook
	mutation *UserLoginMethodMutation
}

// Where appends a list predicates to the UserLoginMethodUpdate builder.
func (ulmu *UserLoginMethodUpdate) Where(ps ...predicate.UserLoginMethod) *UserLoginMethodUpdate {
	ulmu.mutation.Where(ps...)
	return ulmu
}

// SetUpdatedAt sets the "updated_at" field.
func (ulmu *UserLoginMethodUpdate) SetUpdatedAt(t time.Time) *UserLoginMethodUpdate {
	ulmu.mutation.SetUpdatedAt(t)
	return ulmu
}

// SetDeletedAt sets the "deleted_at" field.
func (ulmu *UserLoginMethodUpdate) SetDeletedAt(t time.Time) *UserLoginMethodUpdate {
	ulmu.mutation.SetDeletedAt(t)
	return ulmu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ulmu *UserLoginMethodUpdate) SetNillableDeletedAt(t *time.Time) *UserLoginMethodUpdate {
	if t != nil {
		ulmu.SetDeletedAt(*t)
	}
	return ulmu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ulmu *UserLoginMethodUpdate) ClearDeletedAt() *UserLoginMethodUpdate {
	ulmu.mutation.ClearDeletedAt()
	return ulmu
}

// SetLoginType sets the "login_type" field.
func (ulmu *UserLoginMethodUpdate) SetLoginType(s string) *UserLoginMethodUpdate {
	ulmu.mutation.SetLoginType(s)
	return ulmu
}

// SetNillableLoginType sets the "login_type" field if the given value is not nil.
func (ulmu *UserLoginMethodUpdate) SetNillableLoginType(s *string) *UserLoginMethodUpdate {
	if s != nil {
		ulmu.SetLoginType(*s)
	}
	return ulmu
}

// SetIdentifier sets the "identifier" field.
func (ulmu *UserLoginMethodUpdate) SetIdentifier(s string) *UserLoginMethodUpdate {
	ulmu.mutation.SetIdentifier(s)
	return ulmu
}

// SetNillableIdentifier sets the "identifier" field if the given value is not nil.
func (ulmu *UserLoginMethodUpdate) SetNillableIdentifier(s *string) *UserLoginMethodUpdate {
	if s != nil {
		ulmu.SetIdentifier(*s)
	}
	return ulmu
}

// Mutation returns the UserLoginMethodMutation object of the builder.
func (ulmu *UserLoginMethodUpdate) Mutation() *UserLoginMethodMutation {
	return ulmu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ulmu *UserLoginMethodUpdate) Save(ctx context.Context) (int, error) {
	ulmu.defaults()
	return withHooks(ctx, ulmu.sqlSave, ulmu.mutation, ulmu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ulmu *UserLoginMethodUpdate) SaveX(ctx context.Context) int {
	affected, err := ulmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ulmu *UserLoginMethodUpdate) Exec(ctx context.Context) error {
	_, err := ulmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ulmu *UserLoginMethodUpdate) ExecX(ctx context.Context) {
	if err := ulmu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ulmu *UserLoginMethodUpdate) defaults() {
	if _, ok := ulmu.mutation.UpdatedAt(); !ok {
		v := userloginmethod.UpdateDefaultUpdatedAt()
		ulmu.mutation.SetUpdatedAt(v)
	}
}

func (ulmu *UserLoginMethodUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(userloginmethod.Table, userloginmethod.Columns, sqlgraph.NewFieldSpec(userloginmethod.FieldID, field.TypeUint64))
	if ps := ulmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ulmu.mutation.UpdatedAt(); ok {
		_spec.SetField(userloginmethod.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ulmu.mutation.DeletedAt(); ok {
		_spec.SetField(userloginmethod.FieldDeletedAt, field.TypeTime, value)
	}
	if ulmu.mutation.DeletedAtCleared() {
		_spec.ClearField(userloginmethod.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := ulmu.mutation.LoginType(); ok {
		_spec.SetField(userloginmethod.FieldLoginType, field.TypeString, value)
	}
	if value, ok := ulmu.mutation.Identifier(); ok {
		_spec.SetField(userloginmethod.FieldIdentifier, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ulmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userloginmethod.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ulmu.mutation.done = true
	return n, nil
}

// UserLoginMethodUpdateOne is the builder for updating a single UserLoginMethod entity.
type UserLoginMethodUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserLoginMethodMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (ulmuo *UserLoginMethodUpdateOne) SetUpdatedAt(t time.Time) *UserLoginMethodUpdateOne {
	ulmuo.mutation.SetUpdatedAt(t)
	return ulmuo
}

// SetDeletedAt sets the "deleted_at" field.
func (ulmuo *UserLoginMethodUpdateOne) SetDeletedAt(t time.Time) *UserLoginMethodUpdateOne {
	ulmuo.mutation.SetDeletedAt(t)
	return ulmuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ulmuo *UserLoginMethodUpdateOne) SetNillableDeletedAt(t *time.Time) *UserLoginMethodUpdateOne {
	if t != nil {
		ulmuo.SetDeletedAt(*t)
	}
	return ulmuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ulmuo *UserLoginMethodUpdateOne) ClearDeletedAt() *UserLoginMethodUpdateOne {
	ulmuo.mutation.ClearDeletedAt()
	return ulmuo
}

// SetLoginType sets the "login_type" field.
func (ulmuo *UserLoginMethodUpdateOne) SetLoginType(s string) *UserLoginMethodUpdateOne {
	ulmuo.mutation.SetLoginType(s)
	return ulmuo
}

// SetNillableLoginType sets the "login_type" field if the given value is not nil.
func (ulmuo *UserLoginMethodUpdateOne) SetNillableLoginType(s *string) *UserLoginMethodUpdateOne {
	if s != nil {
		ulmuo.SetLoginType(*s)
	}
	return ulmuo
}

// SetIdentifier sets the "identifier" field.
func (ulmuo *UserLoginMethodUpdateOne) SetIdentifier(s string) *UserLoginMethodUpdateOne {
	ulmuo.mutation.SetIdentifier(s)
	return ulmuo
}

// SetNillableIdentifier sets the "identifier" field if the given value is not nil.
func (ulmuo *UserLoginMethodUpdateOne) SetNillableIdentifier(s *string) *UserLoginMethodUpdateOne {
	if s != nil {
		ulmuo.SetIdentifier(*s)
	}
	return ulmuo
}

// Mutation returns the UserLoginMethodMutation object of the builder.
func (ulmuo *UserLoginMethodUpdateOne) Mutation() *UserLoginMethodMutation {
	return ulmuo.mutation
}

// Where appends a list predicates to the UserLoginMethodUpdate builder.
func (ulmuo *UserLoginMethodUpdateOne) Where(ps ...predicate.UserLoginMethod) *UserLoginMethodUpdateOne {
	ulmuo.mutation.Where(ps...)
	return ulmuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ulmuo *UserLoginMethodUpdateOne) Select(field string, fields ...string) *UserLoginMethodUpdateOne {
	ulmuo.fields = append([]string{field}, fields...)
	return ulmuo
}

// Save executes the query and returns the updated UserLoginMethod entity.
func (ulmuo *UserLoginMethodUpdateOne) Save(ctx context.Context) (*UserLoginMethod, error) {
	ulmuo.defaults()
	return withHooks(ctx, ulmuo.sqlSave, ulmuo.mutation, ulmuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ulmuo *UserLoginMethodUpdateOne) SaveX(ctx context.Context) *UserLoginMethod {
	node, err := ulmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ulmuo *UserLoginMethodUpdateOne) Exec(ctx context.Context) error {
	_, err := ulmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ulmuo *UserLoginMethodUpdateOne) ExecX(ctx context.Context) {
	if err := ulmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ulmuo *UserLoginMethodUpdateOne) defaults() {
	if _, ok := ulmuo.mutation.UpdatedAt(); !ok {
		v := userloginmethod.UpdateDefaultUpdatedAt()
		ulmuo.mutation.SetUpdatedAt(v)
	}
}

func (ulmuo *UserLoginMethodUpdateOne) sqlSave(ctx context.Context) (_node *UserLoginMethod, err error) {
	_spec := sqlgraph.NewUpdateSpec(userloginmethod.Table, userloginmethod.Columns, sqlgraph.NewFieldSpec(userloginmethod.FieldID, field.TypeUint64))
	id, ok := ulmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserLoginMethod.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ulmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userloginmethod.FieldID)
		for _, f := range fields {
			if !userloginmethod.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != userloginmethod.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ulmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ulmuo.mutation.UpdatedAt(); ok {
		_spec.SetField(userloginmethod.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ulmuo.mutation.DeletedAt(); ok {
		_spec.SetField(userloginmethod.FieldDeletedAt, field.TypeTime, value)
	}
	if ulmuo.mutation.DeletedAtCleared() {
		_spec.ClearField(userloginmethod.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := ulmuo.mutation.LoginType(); ok {
		_spec.SetField(userloginmethod.FieldLoginType, field.TypeString, value)
	}
	if value, ok := ulmuo.mutation.Identifier(); ok {
		_spec.SetField(userloginmethod.FieldIdentifier, field.TypeString, value)
	}
	_node = &UserLoginMethod{config: ulmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ulmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userloginmethod.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ulmuo.mutation.done = true
	return _node, nil
}
