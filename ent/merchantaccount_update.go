// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/sysatom/framework/ent/merchantaccount"
	"github.com/sysatom/framework/ent/predicate"
)

// MerchantAccountUpdate is the builder for updating MerchantAccount entities.
type MerchantAccountUpdate struct {
	config
	hooks    []Hook
	mutation *MerchantAccountMutation
}

// Where appends a list predicates to the MerchantAccountUpdate builder.
func (mau *MerchantAccountUpdate) Where(ps ...predicate.MerchantAccount) *MerchantAccountUpdate {
	mau.mutation.Where(ps...)
	return mau
}

// SetUsername sets the "username" field.
func (mau *MerchantAccountUpdate) SetUsername(s string) *MerchantAccountUpdate {
	mau.mutation.SetUsername(s)
	return mau
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (mau *MerchantAccountUpdate) SetNillableUsername(s *string) *MerchantAccountUpdate {
	if s != nil {
		mau.SetUsername(*s)
	}
	return mau
}

// SetPassword sets the "password" field.
func (mau *MerchantAccountUpdate) SetPassword(s string) *MerchantAccountUpdate {
	mau.mutation.SetPassword(s)
	return mau
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (mau *MerchantAccountUpdate) SetNillablePassword(s *string) *MerchantAccountUpdate {
	if s != nil {
		mau.SetPassword(*s)
	}
	return mau
}

// SetEmail sets the "email" field.
func (mau *MerchantAccountUpdate) SetEmail(s string) *MerchantAccountUpdate {
	mau.mutation.SetEmail(s)
	return mau
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (mau *MerchantAccountUpdate) SetNillableEmail(s *string) *MerchantAccountUpdate {
	if s != nil {
		mau.SetEmail(*s)
	}
	return mau
}

// ClearEmail clears the value of the "email" field.
func (mau *MerchantAccountUpdate) ClearEmail() *MerchantAccountUpdate {
	mau.mutation.ClearEmail()
	return mau
}

// SetPhone sets the "phone" field.
func (mau *MerchantAccountUpdate) SetPhone(s string) *MerchantAccountUpdate {
	mau.mutation.SetPhone(s)
	return mau
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (mau *MerchantAccountUpdate) SetNillablePhone(s *string) *MerchantAccountUpdate {
	if s != nil {
		mau.SetPhone(*s)
	}
	return mau
}

// ClearPhone clears the value of the "phone" field.
func (mau *MerchantAccountUpdate) ClearPhone() *MerchantAccountUpdate {
	mau.mutation.ClearPhone()
	return mau
}

// SetIsMainAccount sets the "is_main_account" field.
func (mau *MerchantAccountUpdate) SetIsMainAccount(b bool) *MerchantAccountUpdate {
	mau.mutation.SetIsMainAccount(b)
	return mau
}

// SetNillableIsMainAccount sets the "is_main_account" field if the given value is not nil.
func (mau *MerchantAccountUpdate) SetNillableIsMainAccount(b *bool) *MerchantAccountUpdate {
	if b != nil {
		mau.SetIsMainAccount(*b)
	}
	return mau
}

// Mutation returns the MerchantAccountMutation object of the builder.
func (mau *MerchantAccountUpdate) Mutation() *MerchantAccountMutation {
	return mau.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mau *MerchantAccountUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, mau.sqlSave, mau.mutation, mau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mau *MerchantAccountUpdate) SaveX(ctx context.Context) int {
	affected, err := mau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mau *MerchantAccountUpdate) Exec(ctx context.Context) error {
	_, err := mau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mau *MerchantAccountUpdate) ExecX(ctx context.Context) {
	if err := mau.Exec(ctx); err != nil {
		panic(err)
	}
}

func (mau *MerchantAccountUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(merchantaccount.Table, merchantaccount.Columns, sqlgraph.NewFieldSpec(merchantaccount.FieldID, field.TypeInt))
	if ps := mau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mau.mutation.Username(); ok {
		_spec.SetField(merchantaccount.FieldUsername, field.TypeString, value)
	}
	if value, ok := mau.mutation.Password(); ok {
		_spec.SetField(merchantaccount.FieldPassword, field.TypeString, value)
	}
	if value, ok := mau.mutation.Email(); ok {
		_spec.SetField(merchantaccount.FieldEmail, field.TypeString, value)
	}
	if mau.mutation.EmailCleared() {
		_spec.ClearField(merchantaccount.FieldEmail, field.TypeString)
	}
	if value, ok := mau.mutation.Phone(); ok {
		_spec.SetField(merchantaccount.FieldPhone, field.TypeString, value)
	}
	if mau.mutation.PhoneCleared() {
		_spec.ClearField(merchantaccount.FieldPhone, field.TypeString)
	}
	if value, ok := mau.mutation.IsMainAccount(); ok {
		_spec.SetField(merchantaccount.FieldIsMainAccount, field.TypeBool, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{merchantaccount.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mau.mutation.done = true
	return n, nil
}

// MerchantAccountUpdateOne is the builder for updating a single MerchantAccount entity.
type MerchantAccountUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MerchantAccountMutation
}

// SetUsername sets the "username" field.
func (mauo *MerchantAccountUpdateOne) SetUsername(s string) *MerchantAccountUpdateOne {
	mauo.mutation.SetUsername(s)
	return mauo
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (mauo *MerchantAccountUpdateOne) SetNillableUsername(s *string) *MerchantAccountUpdateOne {
	if s != nil {
		mauo.SetUsername(*s)
	}
	return mauo
}

// SetPassword sets the "password" field.
func (mauo *MerchantAccountUpdateOne) SetPassword(s string) *MerchantAccountUpdateOne {
	mauo.mutation.SetPassword(s)
	return mauo
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (mauo *MerchantAccountUpdateOne) SetNillablePassword(s *string) *MerchantAccountUpdateOne {
	if s != nil {
		mauo.SetPassword(*s)
	}
	return mauo
}

// SetEmail sets the "email" field.
func (mauo *MerchantAccountUpdateOne) SetEmail(s string) *MerchantAccountUpdateOne {
	mauo.mutation.SetEmail(s)
	return mauo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (mauo *MerchantAccountUpdateOne) SetNillableEmail(s *string) *MerchantAccountUpdateOne {
	if s != nil {
		mauo.SetEmail(*s)
	}
	return mauo
}

// ClearEmail clears the value of the "email" field.
func (mauo *MerchantAccountUpdateOne) ClearEmail() *MerchantAccountUpdateOne {
	mauo.mutation.ClearEmail()
	return mauo
}

// SetPhone sets the "phone" field.
func (mauo *MerchantAccountUpdateOne) SetPhone(s string) *MerchantAccountUpdateOne {
	mauo.mutation.SetPhone(s)
	return mauo
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (mauo *MerchantAccountUpdateOne) SetNillablePhone(s *string) *MerchantAccountUpdateOne {
	if s != nil {
		mauo.SetPhone(*s)
	}
	return mauo
}

// ClearPhone clears the value of the "phone" field.
func (mauo *MerchantAccountUpdateOne) ClearPhone() *MerchantAccountUpdateOne {
	mauo.mutation.ClearPhone()
	return mauo
}

// SetIsMainAccount sets the "is_main_account" field.
func (mauo *MerchantAccountUpdateOne) SetIsMainAccount(b bool) *MerchantAccountUpdateOne {
	mauo.mutation.SetIsMainAccount(b)
	return mauo
}

// SetNillableIsMainAccount sets the "is_main_account" field if the given value is not nil.
func (mauo *MerchantAccountUpdateOne) SetNillableIsMainAccount(b *bool) *MerchantAccountUpdateOne {
	if b != nil {
		mauo.SetIsMainAccount(*b)
	}
	return mauo
}

// Mutation returns the MerchantAccountMutation object of the builder.
func (mauo *MerchantAccountUpdateOne) Mutation() *MerchantAccountMutation {
	return mauo.mutation
}

// Where appends a list predicates to the MerchantAccountUpdate builder.
func (mauo *MerchantAccountUpdateOne) Where(ps ...predicate.MerchantAccount) *MerchantAccountUpdateOne {
	mauo.mutation.Where(ps...)
	return mauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (mauo *MerchantAccountUpdateOne) Select(field string, fields ...string) *MerchantAccountUpdateOne {
	mauo.fields = append([]string{field}, fields...)
	return mauo
}

// Save executes the query and returns the updated MerchantAccount entity.
func (mauo *MerchantAccountUpdateOne) Save(ctx context.Context) (*MerchantAccount, error) {
	return withHooks(ctx, mauo.sqlSave, mauo.mutation, mauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mauo *MerchantAccountUpdateOne) SaveX(ctx context.Context) *MerchantAccount {
	node, err := mauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (mauo *MerchantAccountUpdateOne) Exec(ctx context.Context) error {
	_, err := mauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mauo *MerchantAccountUpdateOne) ExecX(ctx context.Context) {
	if err := mauo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (mauo *MerchantAccountUpdateOne) sqlSave(ctx context.Context) (_node *MerchantAccount, err error) {
	_spec := sqlgraph.NewUpdateSpec(merchantaccount.Table, merchantaccount.Columns, sqlgraph.NewFieldSpec(merchantaccount.FieldID, field.TypeInt))
	id, ok := mauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "MerchantAccount.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := mauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, merchantaccount.FieldID)
		for _, f := range fields {
			if !merchantaccount.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != merchantaccount.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := mauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mauo.mutation.Username(); ok {
		_spec.SetField(merchantaccount.FieldUsername, field.TypeString, value)
	}
	if value, ok := mauo.mutation.Password(); ok {
		_spec.SetField(merchantaccount.FieldPassword, field.TypeString, value)
	}
	if value, ok := mauo.mutation.Email(); ok {
		_spec.SetField(merchantaccount.FieldEmail, field.TypeString, value)
	}
	if mauo.mutation.EmailCleared() {
		_spec.ClearField(merchantaccount.FieldEmail, field.TypeString)
	}
	if value, ok := mauo.mutation.Phone(); ok {
		_spec.SetField(merchantaccount.FieldPhone, field.TypeString, value)
	}
	if mauo.mutation.PhoneCleared() {
		_spec.ClearField(merchantaccount.FieldPhone, field.TypeString)
	}
	if value, ok := mauo.mutation.IsMainAccount(); ok {
		_spec.SetField(merchantaccount.FieldIsMainAccount, field.TypeBool, value)
	}
	_node = &MerchantAccount{config: mauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, mauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{merchantaccount.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	mauo.mutation.done = true
	return _node, nil
}
